Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> modules
Rule 1     empty -> <empty>
Rule 2     modules -> module
Rule 3     modules -> modules module
Rule 4     module -> DEFMODULE ID do_block
Rule 5     statements -> statement
Rule 6     statements -> statements statement
Rule 7     statement -> assignment
Rule 8     statement -> function_definition
Rule 9     statement -> private_function_definition
Rule 10    statement -> do_block
Rule 11    assignment_qualifier -> CONST
Rule 12    assignment -> ID = expression
Rule 13    assignment -> assignment_qualifier ID = expression
Rule 14    function_definition -> DEF ID ( def_argument_list ) do_block
Rule 15    private_function_definition -> DEFP ID ( def_argument_list ) do_block
Rule 16    def_argument -> ID
Rule 17    def_argument -> assignment
Rule 18    def_argument_list -> empty
Rule 19    def_argument_list -> def_argument
Rule 20    def_argument_list -> def_argument_list , def_argument
Rule 21    do_block -> DO END
Rule 22    do_return -> RETURN
Rule 23    do_return -> 
Rule 24    do_block -> DO statements END
Rule 25    do_block -> DO statements do_return expression END
Rule 26    do_block -> DO do_return expression END
Rule 27    expression -> constant
Rule 28    expression -> expression + constant
Rule 29    expression -> expression - constant
Rule 30    expression -> expression * constant
Rule 31    expression -> expression / constant
Rule 32    expression -> expression ^ constant
Rule 33    expression -> expression % constant
Rule 34    constant -> ID
Rule 35    constant -> NUMBER
Rule 36    constant -> STRING
Rule 37    constant -> ( expression )

Terminals, with rules where they appear

                     : 23
%                    : 33
(                    : 14 15 37
)                    : 14 15 37
*                    : 30
+                    : 28
,                    : 20
-                    : 29
/                    : 31
=                    : 12 13
CONST                : 11
DEF                  : 14
DEFMODULE            : 4
DEFP                 : 15
DO                   : 21 24 25 26
END                  : 21 24 25 26
ID                   : 4 12 13 14 15 16 34
NUMBER               : 35
RETURN               : 22
STRING               : 36
^                    : 32
error                : 

Nonterminals, with rules where they appear

assignment           : 7 17
assignment_qualifier : 13
constant             : 27 28 29 30 31 32 33
def_argument         : 19 20
def_argument_list    : 14 15 20
do_block             : 4 10 14 15
do_return            : 25 26
empty                : 18
expression           : 12 13 25 26 28 29 30 31 32 33 37
function_definition  : 8
module               : 2 3
modules              : 3 0
private_function_definition : 9
statement            : 5 6
statements           : 6 24 25

Parsing method: LALR

state 0

    (0) S' -> . modules
    (2) modules -> . module
    (3) modules -> . modules module
    (4) module -> . DEFMODULE ID do_block

    DEFMODULE       shift and go to state 3

    module                         shift and go to state 1
    modules                        shift and go to state 2

state 1

    (2) modules -> module .

    DEFMODULE       reduce using rule 2 (modules -> module .)
    $end            reduce using rule 2 (modules -> module .)


state 2

    (0) S' -> modules .
    (3) modules -> modules . module
    (4) module -> . DEFMODULE ID do_block

    DEFMODULE       shift and go to state 3

    module                         shift and go to state 4

state 3

    (4) module -> DEFMODULE . ID do_block

    ID              shift and go to state 5


state 4

    (3) modules -> modules module .

    DEFMODULE       reduce using rule 3 (modules -> modules module .)
    $end            reduce using rule 3 (modules -> modules module .)


state 5

    (4) module -> DEFMODULE ID . do_block
    (21) do_block -> . DO END
    (24) do_block -> . DO statements END
    (25) do_block -> . DO statements do_return expression END
    (26) do_block -> . DO do_return expression END

    DO              shift and go to state 6

    do_block                       shift and go to state 7

state 6

    (21) do_block -> DO . END
    (24) do_block -> DO . statements END
    (25) do_block -> DO . statements do_return expression END
    (26) do_block -> DO . do_return expression END
    (5) statements -> . statement
    (6) statements -> . statements statement
    (22) do_return -> . RETURN
    (23) do_return -> . 
    (7) statement -> . assignment
    (8) statement -> . function_definition
    (9) statement -> . private_function_definition
    (10) statement -> . do_block
    (12) assignment -> . ID = expression
    (13) assignment -> . assignment_qualifier ID = expression
    (14) function_definition -> . DEF ID ( def_argument_list ) do_block
    (15) private_function_definition -> . DEFP ID ( def_argument_list ) do_block
    (21) do_block -> . DO END
    (24) do_block -> . DO statements END
    (25) do_block -> . DO statements do_return expression END
    (26) do_block -> . DO do_return expression END
    (11) assignment_qualifier -> . CONST

    END             shift and go to state 20
    RETURN          shift and go to state 9
                    shift and go to state 8
    ID              shift and go to state 15
    DEF             shift and go to state 22
    DEFP            shift and go to state 19
    DO              shift and go to state 6
    CONST           shift and go to state 13

    assignment_qualifier           shift and go to state 16
    function_definition            shift and go to state 10
    statements                     shift and go to state 11
    do_return                      shift and go to state 12
    statement                      shift and go to state 17
    private_function_definition    shift and go to state 18
    assignment                     shift and go to state 14
    do_block                       shift and go to state 21

state 7

    (4) module -> DEFMODULE ID do_block .

    DEFMODULE       reduce using rule 4 (module -> DEFMODULE ID do_block .)
    $end            reduce using rule 4 (module -> DEFMODULE ID do_block .)


state 8

    (23) do_return ->  .

    ID              reduce using rule 23 (do_return ->  .)
    NUMBER          reduce using rule 23 (do_return ->  .)
    STRING          reduce using rule 23 (do_return ->  .)
    (               reduce using rule 23 (do_return ->  .)


state 9

    (22) do_return -> RETURN .

    ID              reduce using rule 22 (do_return -> RETURN .)
    NUMBER          reduce using rule 22 (do_return -> RETURN .)
    STRING          reduce using rule 22 (do_return -> RETURN .)
    (               reduce using rule 22 (do_return -> RETURN .)


state 10

    (8) statement -> function_definition .

    END             reduce using rule 8 (statement -> function_definition .)
    RETURN          reduce using rule 8 (statement -> function_definition .)
                    reduce using rule 8 (statement -> function_definition .)
    ID              reduce using rule 8 (statement -> function_definition .)
    DEF             reduce using rule 8 (statement -> function_definition .)
    DEFP            reduce using rule 8 (statement -> function_definition .)
    DO              reduce using rule 8 (statement -> function_definition .)
    CONST           reduce using rule 8 (statement -> function_definition .)


state 11

    (24) do_block -> DO statements . END
    (25) do_block -> DO statements . do_return expression END
    (6) statements -> statements . statement
    (22) do_return -> . RETURN
    (23) do_return -> . 
    (7) statement -> . assignment
    (8) statement -> . function_definition
    (9) statement -> . private_function_definition
    (10) statement -> . do_block
    (12) assignment -> . ID = expression
    (13) assignment -> . assignment_qualifier ID = expression
    (14) function_definition -> . DEF ID ( def_argument_list ) do_block
    (15) private_function_definition -> . DEFP ID ( def_argument_list ) do_block
    (21) do_block -> . DO END
    (24) do_block -> . DO statements END
    (25) do_block -> . DO statements do_return expression END
    (26) do_block -> . DO do_return expression END
    (11) assignment_qualifier -> . CONST

    END             shift and go to state 25
    RETURN          shift and go to state 9
                    shift and go to state 8
    ID              shift and go to state 15
    DEF             shift and go to state 22
    DEFP            shift and go to state 19
    DO              shift and go to state 6
    CONST           shift and go to state 13

    assignment_qualifier           shift and go to state 16
    function_definition            shift and go to state 10
    do_return                      shift and go to state 23
    statement                      shift and go to state 24
    private_function_definition    shift and go to state 18
    assignment                     shift and go to state 14
    do_block                       shift and go to state 21

state 12

    (26) do_block -> DO do_return . expression END
    (27) expression -> . constant
    (28) expression -> . expression + constant
    (29) expression -> . expression - constant
    (30) expression -> . expression * constant
    (31) expression -> . expression / constant
    (32) expression -> . expression ^ constant
    (33) expression -> . expression % constant
    (34) constant -> . ID
    (35) constant -> . NUMBER
    (36) constant -> . STRING
    (37) constant -> . ( expression )

    ID              shift and go to state 30
    NUMBER          shift and go to state 28
    STRING          shift and go to state 26
    (               shift and go to state 29

    expression                     shift and go to state 27
    constant                       shift and go to state 31

state 13

    (11) assignment_qualifier -> CONST .

    ID              reduce using rule 11 (assignment_qualifier -> CONST .)


state 14

    (7) statement -> assignment .

    END             reduce using rule 7 (statement -> assignment .)
    RETURN          reduce using rule 7 (statement -> assignment .)
                    reduce using rule 7 (statement -> assignment .)
    ID              reduce using rule 7 (statement -> assignment .)
    DEF             reduce using rule 7 (statement -> assignment .)
    DEFP            reduce using rule 7 (statement -> assignment .)
    DO              reduce using rule 7 (statement -> assignment .)
    CONST           reduce using rule 7 (statement -> assignment .)


state 15

    (12) assignment -> ID . = expression

    =               shift and go to state 32


state 16

    (13) assignment -> assignment_qualifier . ID = expression

    ID              shift and go to state 33


state 17

    (5) statements -> statement .

    END             reduce using rule 5 (statements -> statement .)
    RETURN          reduce using rule 5 (statements -> statement .)
                    reduce using rule 5 (statements -> statement .)
    ID              reduce using rule 5 (statements -> statement .)
    DEF             reduce using rule 5 (statements -> statement .)
    DEFP            reduce using rule 5 (statements -> statement .)
    DO              reduce using rule 5 (statements -> statement .)
    CONST           reduce using rule 5 (statements -> statement .)


state 18

    (9) statement -> private_function_definition .

    END             reduce using rule 9 (statement -> private_function_definition .)
    RETURN          reduce using rule 9 (statement -> private_function_definition .)
                    reduce using rule 9 (statement -> private_function_definition .)
    ID              reduce using rule 9 (statement -> private_function_definition .)
    DEF             reduce using rule 9 (statement -> private_function_definition .)
    DEFP            reduce using rule 9 (statement -> private_function_definition .)
    DO              reduce using rule 9 (statement -> private_function_definition .)
    CONST           reduce using rule 9 (statement -> private_function_definition .)


state 19

    (15) private_function_definition -> DEFP . ID ( def_argument_list ) do_block

    ID              shift and go to state 34


state 20

    (21) do_block -> DO END .

    END             reduce using rule 21 (do_block -> DO END .)
    RETURN          reduce using rule 21 (do_block -> DO END .)
                    reduce using rule 21 (do_block -> DO END .)
    ID              reduce using rule 21 (do_block -> DO END .)
    DEF             reduce using rule 21 (do_block -> DO END .)
    DEFP            reduce using rule 21 (do_block -> DO END .)
    DO              reduce using rule 21 (do_block -> DO END .)
    CONST           reduce using rule 21 (do_block -> DO END .)
    DEFMODULE       reduce using rule 21 (do_block -> DO END .)
    $end            reduce using rule 21 (do_block -> DO END .)


state 21

    (10) statement -> do_block .

    END             reduce using rule 10 (statement -> do_block .)
    RETURN          reduce using rule 10 (statement -> do_block .)
                    reduce using rule 10 (statement -> do_block .)
    ID              reduce using rule 10 (statement -> do_block .)
    DEF             reduce using rule 10 (statement -> do_block .)
    DEFP            reduce using rule 10 (statement -> do_block .)
    DO              reduce using rule 10 (statement -> do_block .)
    CONST           reduce using rule 10 (statement -> do_block .)


state 22

    (14) function_definition -> DEF . ID ( def_argument_list ) do_block

    ID              shift and go to state 35


state 23

    (25) do_block -> DO statements do_return . expression END
    (27) expression -> . constant
    (28) expression -> . expression + constant
    (29) expression -> . expression - constant
    (30) expression -> . expression * constant
    (31) expression -> . expression / constant
    (32) expression -> . expression ^ constant
    (33) expression -> . expression % constant
    (34) constant -> . ID
    (35) constant -> . NUMBER
    (36) constant -> . STRING
    (37) constant -> . ( expression )

    ID              shift and go to state 30
    NUMBER          shift and go to state 28
    STRING          shift and go to state 26
    (               shift and go to state 29

    expression                     shift and go to state 36
    constant                       shift and go to state 31

state 24

    (6) statements -> statements statement .

    END             reduce using rule 6 (statements -> statements statement .)
    RETURN          reduce using rule 6 (statements -> statements statement .)
                    reduce using rule 6 (statements -> statements statement .)
    ID              reduce using rule 6 (statements -> statements statement .)
    DEF             reduce using rule 6 (statements -> statements statement .)
    DEFP            reduce using rule 6 (statements -> statements statement .)
    DO              reduce using rule 6 (statements -> statements statement .)
    CONST           reduce using rule 6 (statements -> statements statement .)


state 25

    (24) do_block -> DO statements END .

    END             reduce using rule 24 (do_block -> DO statements END .)
    RETURN          reduce using rule 24 (do_block -> DO statements END .)
                    reduce using rule 24 (do_block -> DO statements END .)
    ID              reduce using rule 24 (do_block -> DO statements END .)
    DEF             reduce using rule 24 (do_block -> DO statements END .)
    DEFP            reduce using rule 24 (do_block -> DO statements END .)
    DO              reduce using rule 24 (do_block -> DO statements END .)
    CONST           reduce using rule 24 (do_block -> DO statements END .)
    DEFMODULE       reduce using rule 24 (do_block -> DO statements END .)
    $end            reduce using rule 24 (do_block -> DO statements END .)


state 26

    (36) constant -> STRING .

    END             reduce using rule 36 (constant -> STRING .)
    +               reduce using rule 36 (constant -> STRING .)
    -               reduce using rule 36 (constant -> STRING .)
    *               reduce using rule 36 (constant -> STRING .)
    /               reduce using rule 36 (constant -> STRING .)
    ^               reduce using rule 36 (constant -> STRING .)
    %               reduce using rule 36 (constant -> STRING .)
    )               reduce using rule 36 (constant -> STRING .)
    RETURN          reduce using rule 36 (constant -> STRING .)
                    reduce using rule 36 (constant -> STRING .)
    ID              reduce using rule 36 (constant -> STRING .)
    DEF             reduce using rule 36 (constant -> STRING .)
    DEFP            reduce using rule 36 (constant -> STRING .)
    DO              reduce using rule 36 (constant -> STRING .)
    CONST           reduce using rule 36 (constant -> STRING .)
    ,               reduce using rule 36 (constant -> STRING .)


state 27

    (26) do_block -> DO do_return expression . END
    (28) expression -> expression . + constant
    (29) expression -> expression . - constant
    (30) expression -> expression . * constant
    (31) expression -> expression . / constant
    (32) expression -> expression . ^ constant
    (33) expression -> expression . % constant

    END             shift and go to state 40
    +               shift and go to state 43
    -               shift and go to state 42
    *               shift and go to state 37
    /               shift and go to state 41
    ^               shift and go to state 38
    %               shift and go to state 39


state 28

    (35) constant -> NUMBER .

    END             reduce using rule 35 (constant -> NUMBER .)
    +               reduce using rule 35 (constant -> NUMBER .)
    -               reduce using rule 35 (constant -> NUMBER .)
    *               reduce using rule 35 (constant -> NUMBER .)
    /               reduce using rule 35 (constant -> NUMBER .)
    ^               reduce using rule 35 (constant -> NUMBER .)
    %               reduce using rule 35 (constant -> NUMBER .)
    )               reduce using rule 35 (constant -> NUMBER .)
    RETURN          reduce using rule 35 (constant -> NUMBER .)
                    reduce using rule 35 (constant -> NUMBER .)
    ID              reduce using rule 35 (constant -> NUMBER .)
    DEF             reduce using rule 35 (constant -> NUMBER .)
    DEFP            reduce using rule 35 (constant -> NUMBER .)
    DO              reduce using rule 35 (constant -> NUMBER .)
    CONST           reduce using rule 35 (constant -> NUMBER .)
    ,               reduce using rule 35 (constant -> NUMBER .)


state 29

    (37) constant -> ( . expression )
    (27) expression -> . constant
    (28) expression -> . expression + constant
    (29) expression -> . expression - constant
    (30) expression -> . expression * constant
    (31) expression -> . expression / constant
    (32) expression -> . expression ^ constant
    (33) expression -> . expression % constant
    (34) constant -> . ID
    (35) constant -> . NUMBER
    (36) constant -> . STRING
    (37) constant -> . ( expression )

    ID              shift and go to state 30
    NUMBER          shift and go to state 28
    STRING          shift and go to state 26
    (               shift and go to state 29

    expression                     shift and go to state 44
    constant                       shift and go to state 31

state 30

    (34) constant -> ID .

    END             reduce using rule 34 (constant -> ID .)
    +               reduce using rule 34 (constant -> ID .)
    -               reduce using rule 34 (constant -> ID .)
    *               reduce using rule 34 (constant -> ID .)
    /               reduce using rule 34 (constant -> ID .)
    ^               reduce using rule 34 (constant -> ID .)
    %               reduce using rule 34 (constant -> ID .)
    )               reduce using rule 34 (constant -> ID .)
    RETURN          reduce using rule 34 (constant -> ID .)
                    reduce using rule 34 (constant -> ID .)
    ID              reduce using rule 34 (constant -> ID .)
    DEF             reduce using rule 34 (constant -> ID .)
    DEFP            reduce using rule 34 (constant -> ID .)
    DO              reduce using rule 34 (constant -> ID .)
    CONST           reduce using rule 34 (constant -> ID .)
    ,               reduce using rule 34 (constant -> ID .)


state 31

    (27) expression -> constant .

    )               reduce using rule 27 (expression -> constant .)
    +               reduce using rule 27 (expression -> constant .)
    -               reduce using rule 27 (expression -> constant .)
    *               reduce using rule 27 (expression -> constant .)
    /               reduce using rule 27 (expression -> constant .)
    ^               reduce using rule 27 (expression -> constant .)
    %               reduce using rule 27 (expression -> constant .)
    END             reduce using rule 27 (expression -> constant .)
    RETURN          reduce using rule 27 (expression -> constant .)
                    reduce using rule 27 (expression -> constant .)
    ID              reduce using rule 27 (expression -> constant .)
    DEF             reduce using rule 27 (expression -> constant .)
    DEFP            reduce using rule 27 (expression -> constant .)
    DO              reduce using rule 27 (expression -> constant .)
    CONST           reduce using rule 27 (expression -> constant .)
    ,               reduce using rule 27 (expression -> constant .)


state 32

    (12) assignment -> ID = . expression
    (27) expression -> . constant
    (28) expression -> . expression + constant
    (29) expression -> . expression - constant
    (30) expression -> . expression * constant
    (31) expression -> . expression / constant
    (32) expression -> . expression ^ constant
    (33) expression -> . expression % constant
    (34) constant -> . ID
    (35) constant -> . NUMBER
    (36) constant -> . STRING
    (37) constant -> . ( expression )

    ID              shift and go to state 30
    NUMBER          shift and go to state 28
    STRING          shift and go to state 26
    (               shift and go to state 29

    expression                     shift and go to state 45
    constant                       shift and go to state 31

state 33

    (13) assignment -> assignment_qualifier ID . = expression

    =               shift and go to state 46


state 34

    (15) private_function_definition -> DEFP ID . ( def_argument_list ) do_block

    (               shift and go to state 47


state 35

    (14) function_definition -> DEF ID . ( def_argument_list ) do_block

    (               shift and go to state 48


state 36

    (25) do_block -> DO statements do_return expression . END
    (28) expression -> expression . + constant
    (29) expression -> expression . - constant
    (30) expression -> expression . * constant
    (31) expression -> expression . / constant
    (32) expression -> expression . ^ constant
    (33) expression -> expression . % constant

    END             shift and go to state 49
    +               shift and go to state 43
    -               shift and go to state 42
    *               shift and go to state 37
    /               shift and go to state 41
    ^               shift and go to state 38
    %               shift and go to state 39


state 37

    (30) expression -> expression * . constant
    (34) constant -> . ID
    (35) constant -> . NUMBER
    (36) constant -> . STRING
    (37) constant -> . ( expression )

    ID              shift and go to state 30
    NUMBER          shift and go to state 28
    STRING          shift and go to state 26
    (               shift and go to state 29

    constant                       shift and go to state 50

state 38

    (32) expression -> expression ^ . constant
    (34) constant -> . ID
    (35) constant -> . NUMBER
    (36) constant -> . STRING
    (37) constant -> . ( expression )

    ID              shift and go to state 30
    NUMBER          shift and go to state 28
    STRING          shift and go to state 26
    (               shift and go to state 29

    constant                       shift and go to state 51

state 39

    (33) expression -> expression % . constant
    (34) constant -> . ID
    (35) constant -> . NUMBER
    (36) constant -> . STRING
    (37) constant -> . ( expression )

    ID              shift and go to state 30
    NUMBER          shift and go to state 28
    STRING          shift and go to state 26
    (               shift and go to state 29

    constant                       shift and go to state 52

state 40

    (26) do_block -> DO do_return expression END .

    END             reduce using rule 26 (do_block -> DO do_return expression END .)
    RETURN          reduce using rule 26 (do_block -> DO do_return expression END .)
                    reduce using rule 26 (do_block -> DO do_return expression END .)
    ID              reduce using rule 26 (do_block -> DO do_return expression END .)
    DEF             reduce using rule 26 (do_block -> DO do_return expression END .)
    DEFP            reduce using rule 26 (do_block -> DO do_return expression END .)
    DO              reduce using rule 26 (do_block -> DO do_return expression END .)
    CONST           reduce using rule 26 (do_block -> DO do_return expression END .)
    DEFMODULE       reduce using rule 26 (do_block -> DO do_return expression END .)
    $end            reduce using rule 26 (do_block -> DO do_return expression END .)


state 41

    (31) expression -> expression / . constant
    (34) constant -> . ID
    (35) constant -> . NUMBER
    (36) constant -> . STRING
    (37) constant -> . ( expression )

    ID              shift and go to state 30
    NUMBER          shift and go to state 28
    STRING          shift and go to state 26
    (               shift and go to state 29

    constant                       shift and go to state 53

state 42

    (29) expression -> expression - . constant
    (34) constant -> . ID
    (35) constant -> . NUMBER
    (36) constant -> . STRING
    (37) constant -> . ( expression )

    ID              shift and go to state 30
    NUMBER          shift and go to state 28
    STRING          shift and go to state 26
    (               shift and go to state 29

    constant                       shift and go to state 54

state 43

    (28) expression -> expression + . constant
    (34) constant -> . ID
    (35) constant -> . NUMBER
    (36) constant -> . STRING
    (37) constant -> . ( expression )

    ID              shift and go to state 30
    NUMBER          shift and go to state 28
    STRING          shift and go to state 26
    (               shift and go to state 29

    constant                       shift and go to state 55

state 44

    (37) constant -> ( expression . )
    (28) expression -> expression . + constant
    (29) expression -> expression . - constant
    (30) expression -> expression . * constant
    (31) expression -> expression . / constant
    (32) expression -> expression . ^ constant
    (33) expression -> expression . % constant

    )               shift and go to state 56
    +               shift and go to state 43
    -               shift and go to state 42
    *               shift and go to state 37
    /               shift and go to state 41
    ^               shift and go to state 38
    %               shift and go to state 39


state 45

    (12) assignment -> ID = expression .
    (28) expression -> expression . + constant
    (29) expression -> expression . - constant
    (30) expression -> expression . * constant
    (31) expression -> expression . / constant
    (32) expression -> expression . ^ constant
    (33) expression -> expression . % constant

    END             reduce using rule 12 (assignment -> ID = expression .)
    RETURN          reduce using rule 12 (assignment -> ID = expression .)
                    reduce using rule 12 (assignment -> ID = expression .)
    ID              reduce using rule 12 (assignment -> ID = expression .)
    DEF             reduce using rule 12 (assignment -> ID = expression .)
    DEFP            reduce using rule 12 (assignment -> ID = expression .)
    DO              reduce using rule 12 (assignment -> ID = expression .)
    CONST           reduce using rule 12 (assignment -> ID = expression .)
    )               reduce using rule 12 (assignment -> ID = expression .)
    ,               reduce using rule 12 (assignment -> ID = expression .)
    +               shift and go to state 43
    -               shift and go to state 42
    *               shift and go to state 37
    /               shift and go to state 41
    ^               shift and go to state 38
    %               shift and go to state 39


state 46

    (13) assignment -> assignment_qualifier ID = . expression
    (27) expression -> . constant
    (28) expression -> . expression + constant
    (29) expression -> . expression - constant
    (30) expression -> . expression * constant
    (31) expression -> . expression / constant
    (32) expression -> . expression ^ constant
    (33) expression -> . expression % constant
    (34) constant -> . ID
    (35) constant -> . NUMBER
    (36) constant -> . STRING
    (37) constant -> . ( expression )

    ID              shift and go to state 30
    NUMBER          shift and go to state 28
    STRING          shift and go to state 26
    (               shift and go to state 29

    expression                     shift and go to state 57
    constant                       shift and go to state 31

state 47

    (15) private_function_definition -> DEFP ID ( . def_argument_list ) do_block
    (18) def_argument_list -> . empty
    (19) def_argument_list -> . def_argument
    (20) def_argument_list -> . def_argument_list , def_argument
    (1) empty -> .
    (16) def_argument -> . ID
    (17) def_argument -> . assignment
    (12) assignment -> . ID = expression
    (13) assignment -> . assignment_qualifier ID = expression
    (11) assignment_qualifier -> . CONST

    )               reduce using rule 1 (empty -> .)
    ,               reduce using rule 1 (empty -> .)
    ID              shift and go to state 61
    CONST           shift and go to state 13

    def_argument_list              shift and go to state 58
    empty                          shift and go to state 59
    assignment_qualifier           shift and go to state 16
    def_argument                   shift and go to state 60
    assignment                     shift and go to state 62

state 48

    (14) function_definition -> DEF ID ( . def_argument_list ) do_block
    (18) def_argument_list -> . empty
    (19) def_argument_list -> . def_argument
    (20) def_argument_list -> . def_argument_list , def_argument
    (1) empty -> .
    (16) def_argument -> . ID
    (17) def_argument -> . assignment
    (12) assignment -> . ID = expression
    (13) assignment -> . assignment_qualifier ID = expression
    (11) assignment_qualifier -> . CONST

    )               reduce using rule 1 (empty -> .)
    ,               reduce using rule 1 (empty -> .)
    ID              shift and go to state 61
    CONST           shift and go to state 13

    def_argument_list              shift and go to state 63
    empty                          shift and go to state 59
    assignment_qualifier           shift and go to state 16
    def_argument                   shift and go to state 60
    assignment                     shift and go to state 62

state 49

    (25) do_block -> DO statements do_return expression END .

    END             reduce using rule 25 (do_block -> DO statements do_return expression END .)
    RETURN          reduce using rule 25 (do_block -> DO statements do_return expression END .)
                    reduce using rule 25 (do_block -> DO statements do_return expression END .)
    ID              reduce using rule 25 (do_block -> DO statements do_return expression END .)
    DEF             reduce using rule 25 (do_block -> DO statements do_return expression END .)
    DEFP            reduce using rule 25 (do_block -> DO statements do_return expression END .)
    DO              reduce using rule 25 (do_block -> DO statements do_return expression END .)
    CONST           reduce using rule 25 (do_block -> DO statements do_return expression END .)
    DEFMODULE       reduce using rule 25 (do_block -> DO statements do_return expression END .)
    $end            reduce using rule 25 (do_block -> DO statements do_return expression END .)


state 50

    (30) expression -> expression * constant .

    )               reduce using rule 30 (expression -> expression * constant .)
    +               reduce using rule 30 (expression -> expression * constant .)
    -               reduce using rule 30 (expression -> expression * constant .)
    *               reduce using rule 30 (expression -> expression * constant .)
    /               reduce using rule 30 (expression -> expression * constant .)
    ^               reduce using rule 30 (expression -> expression * constant .)
    %               reduce using rule 30 (expression -> expression * constant .)
    END             reduce using rule 30 (expression -> expression * constant .)
    RETURN          reduce using rule 30 (expression -> expression * constant .)
                    reduce using rule 30 (expression -> expression * constant .)
    ID              reduce using rule 30 (expression -> expression * constant .)
    DEF             reduce using rule 30 (expression -> expression * constant .)
    DEFP            reduce using rule 30 (expression -> expression * constant .)
    DO              reduce using rule 30 (expression -> expression * constant .)
    CONST           reduce using rule 30 (expression -> expression * constant .)
    ,               reduce using rule 30 (expression -> expression * constant .)


state 51

    (32) expression -> expression ^ constant .

    )               reduce using rule 32 (expression -> expression ^ constant .)
    +               reduce using rule 32 (expression -> expression ^ constant .)
    -               reduce using rule 32 (expression -> expression ^ constant .)
    *               reduce using rule 32 (expression -> expression ^ constant .)
    /               reduce using rule 32 (expression -> expression ^ constant .)
    ^               reduce using rule 32 (expression -> expression ^ constant .)
    %               reduce using rule 32 (expression -> expression ^ constant .)
    END             reduce using rule 32 (expression -> expression ^ constant .)
    RETURN          reduce using rule 32 (expression -> expression ^ constant .)
                    reduce using rule 32 (expression -> expression ^ constant .)
    ID              reduce using rule 32 (expression -> expression ^ constant .)
    DEF             reduce using rule 32 (expression -> expression ^ constant .)
    DEFP            reduce using rule 32 (expression -> expression ^ constant .)
    DO              reduce using rule 32 (expression -> expression ^ constant .)
    CONST           reduce using rule 32 (expression -> expression ^ constant .)
    ,               reduce using rule 32 (expression -> expression ^ constant .)


state 52

    (33) expression -> expression % constant .

    )               reduce using rule 33 (expression -> expression % constant .)
    +               reduce using rule 33 (expression -> expression % constant .)
    -               reduce using rule 33 (expression -> expression % constant .)
    *               reduce using rule 33 (expression -> expression % constant .)
    /               reduce using rule 33 (expression -> expression % constant .)
    ^               reduce using rule 33 (expression -> expression % constant .)
    %               reduce using rule 33 (expression -> expression % constant .)
    END             reduce using rule 33 (expression -> expression % constant .)
    RETURN          reduce using rule 33 (expression -> expression % constant .)
                    reduce using rule 33 (expression -> expression % constant .)
    ID              reduce using rule 33 (expression -> expression % constant .)
    DEF             reduce using rule 33 (expression -> expression % constant .)
    DEFP            reduce using rule 33 (expression -> expression % constant .)
    DO              reduce using rule 33 (expression -> expression % constant .)
    CONST           reduce using rule 33 (expression -> expression % constant .)
    ,               reduce using rule 33 (expression -> expression % constant .)


state 53

    (31) expression -> expression / constant .

    )               reduce using rule 31 (expression -> expression / constant .)
    +               reduce using rule 31 (expression -> expression / constant .)
    -               reduce using rule 31 (expression -> expression / constant .)
    *               reduce using rule 31 (expression -> expression / constant .)
    /               reduce using rule 31 (expression -> expression / constant .)
    ^               reduce using rule 31 (expression -> expression / constant .)
    %               reduce using rule 31 (expression -> expression / constant .)
    END             reduce using rule 31 (expression -> expression / constant .)
    RETURN          reduce using rule 31 (expression -> expression / constant .)
                    reduce using rule 31 (expression -> expression / constant .)
    ID              reduce using rule 31 (expression -> expression / constant .)
    DEF             reduce using rule 31 (expression -> expression / constant .)
    DEFP            reduce using rule 31 (expression -> expression / constant .)
    DO              reduce using rule 31 (expression -> expression / constant .)
    CONST           reduce using rule 31 (expression -> expression / constant .)
    ,               reduce using rule 31 (expression -> expression / constant .)


state 54

    (29) expression -> expression - constant .

    )               reduce using rule 29 (expression -> expression - constant .)
    +               reduce using rule 29 (expression -> expression - constant .)
    -               reduce using rule 29 (expression -> expression - constant .)
    *               reduce using rule 29 (expression -> expression - constant .)
    /               reduce using rule 29 (expression -> expression - constant .)
    ^               reduce using rule 29 (expression -> expression - constant .)
    %               reduce using rule 29 (expression -> expression - constant .)
    END             reduce using rule 29 (expression -> expression - constant .)
    RETURN          reduce using rule 29 (expression -> expression - constant .)
                    reduce using rule 29 (expression -> expression - constant .)
    ID              reduce using rule 29 (expression -> expression - constant .)
    DEF             reduce using rule 29 (expression -> expression - constant .)
    DEFP            reduce using rule 29 (expression -> expression - constant .)
    DO              reduce using rule 29 (expression -> expression - constant .)
    CONST           reduce using rule 29 (expression -> expression - constant .)
    ,               reduce using rule 29 (expression -> expression - constant .)


state 55

    (28) expression -> expression + constant .

    )               reduce using rule 28 (expression -> expression + constant .)
    +               reduce using rule 28 (expression -> expression + constant .)
    -               reduce using rule 28 (expression -> expression + constant .)
    *               reduce using rule 28 (expression -> expression + constant .)
    /               reduce using rule 28 (expression -> expression + constant .)
    ^               reduce using rule 28 (expression -> expression + constant .)
    %               reduce using rule 28 (expression -> expression + constant .)
    END             reduce using rule 28 (expression -> expression + constant .)
    RETURN          reduce using rule 28 (expression -> expression + constant .)
                    reduce using rule 28 (expression -> expression + constant .)
    ID              reduce using rule 28 (expression -> expression + constant .)
    DEF             reduce using rule 28 (expression -> expression + constant .)
    DEFP            reduce using rule 28 (expression -> expression + constant .)
    DO              reduce using rule 28 (expression -> expression + constant .)
    CONST           reduce using rule 28 (expression -> expression + constant .)
    ,               reduce using rule 28 (expression -> expression + constant .)


state 56

    (37) constant -> ( expression ) .

    END             reduce using rule 37 (constant -> ( expression ) .)
    +               reduce using rule 37 (constant -> ( expression ) .)
    -               reduce using rule 37 (constant -> ( expression ) .)
    *               reduce using rule 37 (constant -> ( expression ) .)
    /               reduce using rule 37 (constant -> ( expression ) .)
    ^               reduce using rule 37 (constant -> ( expression ) .)
    %               reduce using rule 37 (constant -> ( expression ) .)
    )               reduce using rule 37 (constant -> ( expression ) .)
    RETURN          reduce using rule 37 (constant -> ( expression ) .)
                    reduce using rule 37 (constant -> ( expression ) .)
    ID              reduce using rule 37 (constant -> ( expression ) .)
    DEF             reduce using rule 37 (constant -> ( expression ) .)
    DEFP            reduce using rule 37 (constant -> ( expression ) .)
    DO              reduce using rule 37 (constant -> ( expression ) .)
    CONST           reduce using rule 37 (constant -> ( expression ) .)
    ,               reduce using rule 37 (constant -> ( expression ) .)


state 57

    (13) assignment -> assignment_qualifier ID = expression .
    (28) expression -> expression . + constant
    (29) expression -> expression . - constant
    (30) expression -> expression . * constant
    (31) expression -> expression . / constant
    (32) expression -> expression . ^ constant
    (33) expression -> expression . % constant

    END             reduce using rule 13 (assignment -> assignment_qualifier ID = expression .)
    RETURN          reduce using rule 13 (assignment -> assignment_qualifier ID = expression .)
                    reduce using rule 13 (assignment -> assignment_qualifier ID = expression .)
    ID              reduce using rule 13 (assignment -> assignment_qualifier ID = expression .)
    DEF             reduce using rule 13 (assignment -> assignment_qualifier ID = expression .)
    DEFP            reduce using rule 13 (assignment -> assignment_qualifier ID = expression .)
    DO              reduce using rule 13 (assignment -> assignment_qualifier ID = expression .)
    CONST           reduce using rule 13 (assignment -> assignment_qualifier ID = expression .)
    )               reduce using rule 13 (assignment -> assignment_qualifier ID = expression .)
    ,               reduce using rule 13 (assignment -> assignment_qualifier ID = expression .)
    +               shift and go to state 43
    -               shift and go to state 42
    *               shift and go to state 37
    /               shift and go to state 41
    ^               shift and go to state 38
    %               shift and go to state 39


state 58

    (15) private_function_definition -> DEFP ID ( def_argument_list . ) do_block
    (20) def_argument_list -> def_argument_list . , def_argument

    )               shift and go to state 64
    ,               shift and go to state 65


state 59

    (18) def_argument_list -> empty .

    )               reduce using rule 18 (def_argument_list -> empty .)
    ,               reduce using rule 18 (def_argument_list -> empty .)


state 60

    (19) def_argument_list -> def_argument .

    )               reduce using rule 19 (def_argument_list -> def_argument .)
    ,               reduce using rule 19 (def_argument_list -> def_argument .)


state 61

    (16) def_argument -> ID .
    (12) assignment -> ID . = expression

    )               reduce using rule 16 (def_argument -> ID .)
    ,               reduce using rule 16 (def_argument -> ID .)
    =               shift and go to state 32


state 62

    (17) def_argument -> assignment .

    )               reduce using rule 17 (def_argument -> assignment .)
    ,               reduce using rule 17 (def_argument -> assignment .)


state 63

    (14) function_definition -> DEF ID ( def_argument_list . ) do_block
    (20) def_argument_list -> def_argument_list . , def_argument

    )               shift and go to state 66
    ,               shift and go to state 65


state 64

    (15) private_function_definition -> DEFP ID ( def_argument_list ) . do_block
    (21) do_block -> . DO END
    (24) do_block -> . DO statements END
    (25) do_block -> . DO statements do_return expression END
    (26) do_block -> . DO do_return expression END

    DO              shift and go to state 6

    do_block                       shift and go to state 67

state 65

    (20) def_argument_list -> def_argument_list , . def_argument
    (16) def_argument -> . ID
    (17) def_argument -> . assignment
    (12) assignment -> . ID = expression
    (13) assignment -> . assignment_qualifier ID = expression
    (11) assignment_qualifier -> . CONST

    ID              shift and go to state 61
    CONST           shift and go to state 13

    assignment                     shift and go to state 62
    assignment_qualifier           shift and go to state 16
    def_argument                   shift and go to state 68

state 66

    (14) function_definition -> DEF ID ( def_argument_list ) . do_block
    (21) do_block -> . DO END
    (24) do_block -> . DO statements END
    (25) do_block -> . DO statements do_return expression END
    (26) do_block -> . DO do_return expression END

    DO              shift and go to state 6

    do_block                       shift and go to state 69

state 67

    (15) private_function_definition -> DEFP ID ( def_argument_list ) do_block .

    END             reduce using rule 15 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    RETURN          reduce using rule 15 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
                    reduce using rule 15 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    ID              reduce using rule 15 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    DEF             reduce using rule 15 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    DEFP            reduce using rule 15 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    DO              reduce using rule 15 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    CONST           reduce using rule 15 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)


state 68

    (20) def_argument_list -> def_argument_list , def_argument .

    )               reduce using rule 20 (def_argument_list -> def_argument_list , def_argument .)
    ,               reduce using rule 20 (def_argument_list -> def_argument_list , def_argument .)


state 69

    (14) function_definition -> DEF ID ( def_argument_list ) do_block .

    END             reduce using rule 14 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    RETURN          reduce using rule 14 (function_definition -> DEF ID ( def_argument_list ) do_block .)
                    reduce using rule 14 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    ID              reduce using rule 14 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    DEF             reduce using rule 14 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    DEFP            reduce using rule 14 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    DO              reduce using rule 14 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    CONST           reduce using rule 14 (function_definition -> DEF ID ( def_argument_list ) do_block .)

