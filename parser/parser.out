Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> modules
Rule 1     empty -> <empty>
Rule 2     modules -> module
Rule 3     modules -> modules module
Rule 4     module -> DEFMODULE ID do_block
Rule 5     statements -> statement
Rule 6     statements -> statements statement
Rule 7     statement -> if_statement
Rule 8     statement -> assignment
Rule 9     statement -> function_definition
Rule 10    statement -> private_function_definition
Rule 11    statement -> do_block
Rule 12    statement -> expression
Rule 13    statement -> return_statement
Rule 14    return_statement -> RETURN expression
Rule 15    assignment_qualifier -> CONST
Rule 16    assignment_qualifier -> MUT
Rule 17    assignment -> ID = expression
Rule 18    assignment -> assignment_qualifier ID = expression
Rule 19    function_definition -> DEF ID ( def_argument_list ) do_block
Rule 20    private_function_definition -> DEFP ID ( def_argument_list ) do_block
Rule 21    def_argument -> ID
Rule 22    def_argument -> assignment_qualifier ID
Rule 23    def_argument -> assignment
Rule 24    def_argument_list -> empty
Rule 25    def_argument_list -> def_argument
Rule 26    def_argument_list -> def_argument_list , def_argument
Rule 27    do_block -> DO END
Rule 28    do_block -> DO statements END
Rule 29    expression -> constant
Rule 30    expression -> expression + constant
Rule 31    expression -> expression - constant
Rule 32    expression -> expression * constant
Rule 33    expression -> expression / constant
Rule 34    expression -> expression ^ constant
Rule 35    expression -> expression % constant
Rule 36    expression -> expression GREATER_THAN constant
Rule 37    expression -> expression LESS_THAN constant
Rule 38    expression -> expression EQUAL constant
Rule 39    expression -> expression NOT_EQUAL constant
Rule 40    expression -> expression EQ_GREATER_THAN constant
Rule 41    expression -> expression EQ_LESS_THAN constant
Rule 42    expression -> expression AND constant
Rule 43    expression -> expression OR constant
Rule 44    constant -> NUMBER
Rule 45    constant -> STRING
Rule 46    constant -> function_call
Rule 47    constant -> ID
Rule 48    constant -> ( expression )
Rule 49    function_call -> ID ( argument_list )
Rule 50    argument -> expression
Rule 51    argument_list -> empty
Rule 52    argument_list -> argument
Rule 53    argument_list -> argument_list , argument
Rule 54    if_statement -> IF ( expression ) DO statements else_blocks
Rule 55    else_blocks -> else_if_block
Rule 56    else_blocks -> else_block
Rule 57    else_blocks -> END
Rule 58    else_block -> ELSE DO statements
Rule 59    else_if_block -> ELSE_IF ( expression ) DO statements else_blocks

Terminals, with rules where they appear

%                    : 35
(                    : 19 20 48 49 54 59
)                    : 19 20 48 49 54 59
*                    : 32
+                    : 30
,                    : 26 53
-                    : 31
/                    : 33
=                    : 17 18
AND                  : 42
CONST                : 15
DEF                  : 19
DEFMODULE            : 4
DEFP                 : 20
DO                   : 27 28 54 58 59
ELSE                 : 58
ELSE_IF              : 59
END                  : 27 28 57
EQUAL                : 38
EQ_GREATER_THAN      : 40
EQ_LESS_THAN         : 41
GREATER_THAN         : 36
ID                   : 4 17 18 19 20 21 22 47 49
IF                   : 54
LESS_THAN            : 37
MUT                  : 16
NOT_EQUAL            : 39
NUMBER               : 44
OR                   : 43
RETURN               : 14
STRING               : 45
^                    : 34
error                : 

Nonterminals, with rules where they appear

argument             : 52 53
argument_list        : 49 53
assignment           : 8 23
assignment_qualifier : 18 22
constant             : 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
def_argument         : 25 26
def_argument_list    : 19 20 26
do_block             : 4 11 19 20
else_block           : 56
else_blocks          : 54 59
else_if_block        : 55
empty                : 24 51
expression           : 12 14 17 18 30 31 32 33 34 35 36 37 38 39 40 41 42 43 48 50 54 59
function_call        : 46
function_definition  : 9
if_statement         : 7
module               : 2 3
modules              : 3 0
private_function_definition : 10
return_statement     : 13
statement            : 5 6
statements           : 6 28 54 58 59

Parsing method: LALR

state 0

    (0) S' -> . modules
    (2) modules -> . module
    (3) modules -> . modules module
    (4) module -> . DEFMODULE ID do_block

    DEFMODULE       shift and go to state 2

    modules                        shift and go to state 1
    module                         shift and go to state 3

state 1

    (0) S' -> modules .
    (3) modules -> modules . module
    (4) module -> . DEFMODULE ID do_block

    DEFMODULE       shift and go to state 2

    module                         shift and go to state 4

state 2

    (4) module -> DEFMODULE . ID do_block

    ID              shift and go to state 5


state 3

    (2) modules -> module .

    DEFMODULE       reduce using rule 2 (modules -> module .)
    $end            reduce using rule 2 (modules -> module .)


state 4

    (3) modules -> modules module .

    DEFMODULE       reduce using rule 3 (modules -> modules module .)
    $end            reduce using rule 3 (modules -> modules module .)


state 5

    (4) module -> DEFMODULE ID . do_block
    (27) do_block -> . DO END
    (28) do_block -> . DO statements END

    DO              shift and go to state 7

    do_block                       shift and go to state 6

state 6

    (4) module -> DEFMODULE ID do_block .

    DEFMODULE       reduce using rule 4 (module -> DEFMODULE ID do_block .)
    $end            reduce using rule 4 (module -> DEFMODULE ID do_block .)


state 7

    (27) do_block -> DO . END
    (28) do_block -> DO . statements END
    (5) statements -> . statement
    (6) statements -> . statements statement
    (7) statement -> . if_statement
    (8) statement -> . assignment
    (9) statement -> . function_definition
    (10) statement -> . private_function_definition
    (11) statement -> . do_block
    (12) statement -> . expression
    (13) statement -> . return_statement
    (54) if_statement -> . IF ( expression ) DO statements else_blocks
    (17) assignment -> . ID = expression
    (18) assignment -> . assignment_qualifier ID = expression
    (19) function_definition -> . DEF ID ( def_argument_list ) do_block
    (20) private_function_definition -> . DEFP ID ( def_argument_list ) do_block
    (27) do_block -> . DO END
    (28) do_block -> . DO statements END
    (29) expression -> . constant
    (30) expression -> . expression + constant
    (31) expression -> . expression - constant
    (32) expression -> . expression * constant
    (33) expression -> . expression / constant
    (34) expression -> . expression ^ constant
    (35) expression -> . expression % constant
    (36) expression -> . expression GREATER_THAN constant
    (37) expression -> . expression LESS_THAN constant
    (38) expression -> . expression EQUAL constant
    (39) expression -> . expression NOT_EQUAL constant
    (40) expression -> . expression EQ_GREATER_THAN constant
    (41) expression -> . expression EQ_LESS_THAN constant
    (42) expression -> . expression AND constant
    (43) expression -> . expression OR constant
    (14) return_statement -> . RETURN expression
    (15) assignment_qualifier -> . CONST
    (16) assignment_qualifier -> . MUT
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    END             shift and go to state 8
    IF              shift and go to state 24
    ID              shift and go to state 23
    DEF             shift and go to state 17
    DEFP            shift and go to state 26
    DO              shift and go to state 7
    RETURN          shift and go to state 28
    CONST           shift and go to state 9
    MUT             shift and go to state 10
    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    (               shift and go to state 21

    function_definition            shift and go to state 11
    do_block                       shift and go to state 22
    return_statement               shift and go to state 12
    constant                       shift and go to state 15
    assignment                     shift and go to state 27
    statement                      shift and go to state 30
    function_call                  shift and go to state 19
    assignment_qualifier           shift and go to state 18
    statements                     shift and go to state 16
    expression                     shift and go to state 20
    private_function_definition    shift and go to state 29
    if_statement                   shift and go to state 25

state 8

    (27) do_block -> DO END .

    END             reduce using rule 27 (do_block -> DO END .)
    ELSE_IF         reduce using rule 27 (do_block -> DO END .)
    ELSE            reduce using rule 27 (do_block -> DO END .)
    IF              reduce using rule 27 (do_block -> DO END .)
    ID              reduce using rule 27 (do_block -> DO END .)
    DEF             reduce using rule 27 (do_block -> DO END .)
    DEFP            reduce using rule 27 (do_block -> DO END .)
    DO              reduce using rule 27 (do_block -> DO END .)
    RETURN          reduce using rule 27 (do_block -> DO END .)
    CONST           reduce using rule 27 (do_block -> DO END .)
    MUT             reduce using rule 27 (do_block -> DO END .)
    NUMBER          reduce using rule 27 (do_block -> DO END .)
    STRING          reduce using rule 27 (do_block -> DO END .)
    (               reduce using rule 27 (do_block -> DO END .)
    DEFMODULE       reduce using rule 27 (do_block -> DO END .)
    $end            reduce using rule 27 (do_block -> DO END .)


state 9

    (15) assignment_qualifier -> CONST .

    ID              reduce using rule 15 (assignment_qualifier -> CONST .)


state 10

    (16) assignment_qualifier -> MUT .

    ID              reduce using rule 16 (assignment_qualifier -> MUT .)


state 11

    (9) statement -> function_definition .

    END             reduce using rule 9 (statement -> function_definition .)
    IF              reduce using rule 9 (statement -> function_definition .)
    ID              reduce using rule 9 (statement -> function_definition .)
    DEF             reduce using rule 9 (statement -> function_definition .)
    DEFP            reduce using rule 9 (statement -> function_definition .)
    DO              reduce using rule 9 (statement -> function_definition .)
    RETURN          reduce using rule 9 (statement -> function_definition .)
    CONST           reduce using rule 9 (statement -> function_definition .)
    MUT             reduce using rule 9 (statement -> function_definition .)
    NUMBER          reduce using rule 9 (statement -> function_definition .)
    STRING          reduce using rule 9 (statement -> function_definition .)
    (               reduce using rule 9 (statement -> function_definition .)
    ELSE_IF         reduce using rule 9 (statement -> function_definition .)
    ELSE            reduce using rule 9 (statement -> function_definition .)


state 12

    (13) statement -> return_statement .

    END             reduce using rule 13 (statement -> return_statement .)
    IF              reduce using rule 13 (statement -> return_statement .)
    ID              reduce using rule 13 (statement -> return_statement .)
    DEF             reduce using rule 13 (statement -> return_statement .)
    DEFP            reduce using rule 13 (statement -> return_statement .)
    DO              reduce using rule 13 (statement -> return_statement .)
    RETURN          reduce using rule 13 (statement -> return_statement .)
    CONST           reduce using rule 13 (statement -> return_statement .)
    MUT             reduce using rule 13 (statement -> return_statement .)
    NUMBER          reduce using rule 13 (statement -> return_statement .)
    STRING          reduce using rule 13 (statement -> return_statement .)
    (               reduce using rule 13 (statement -> return_statement .)
    ELSE_IF         reduce using rule 13 (statement -> return_statement .)
    ELSE            reduce using rule 13 (statement -> return_statement .)


state 13

    (44) constant -> NUMBER .

    +               reduce using rule 44 (constant -> NUMBER .)
    -               reduce using rule 44 (constant -> NUMBER .)
    *               reduce using rule 44 (constant -> NUMBER .)
    /               reduce using rule 44 (constant -> NUMBER .)
    ^               reduce using rule 44 (constant -> NUMBER .)
    %               reduce using rule 44 (constant -> NUMBER .)
    GREATER_THAN    reduce using rule 44 (constant -> NUMBER .)
    LESS_THAN       reduce using rule 44 (constant -> NUMBER .)
    EQUAL           reduce using rule 44 (constant -> NUMBER .)
    NOT_EQUAL       reduce using rule 44 (constant -> NUMBER .)
    EQ_GREATER_THAN reduce using rule 44 (constant -> NUMBER .)
    EQ_LESS_THAN    reduce using rule 44 (constant -> NUMBER .)
    AND             reduce using rule 44 (constant -> NUMBER .)
    OR              reduce using rule 44 (constant -> NUMBER .)
    END             reduce using rule 44 (constant -> NUMBER .)
    IF              reduce using rule 44 (constant -> NUMBER .)
    ID              reduce using rule 44 (constant -> NUMBER .)
    DEF             reduce using rule 44 (constant -> NUMBER .)
    DEFP            reduce using rule 44 (constant -> NUMBER .)
    DO              reduce using rule 44 (constant -> NUMBER .)
    RETURN          reduce using rule 44 (constant -> NUMBER .)
    CONST           reduce using rule 44 (constant -> NUMBER .)
    MUT             reduce using rule 44 (constant -> NUMBER .)
    NUMBER          reduce using rule 44 (constant -> NUMBER .)
    STRING          reduce using rule 44 (constant -> NUMBER .)
    (               reduce using rule 44 (constant -> NUMBER .)
    )               reduce using rule 44 (constant -> NUMBER .)
    ,               reduce using rule 44 (constant -> NUMBER .)
    ELSE_IF         reduce using rule 44 (constant -> NUMBER .)
    ELSE            reduce using rule 44 (constant -> NUMBER .)


state 14

    (45) constant -> STRING .

    +               reduce using rule 45 (constant -> STRING .)
    -               reduce using rule 45 (constant -> STRING .)
    *               reduce using rule 45 (constant -> STRING .)
    /               reduce using rule 45 (constant -> STRING .)
    ^               reduce using rule 45 (constant -> STRING .)
    %               reduce using rule 45 (constant -> STRING .)
    GREATER_THAN    reduce using rule 45 (constant -> STRING .)
    LESS_THAN       reduce using rule 45 (constant -> STRING .)
    EQUAL           reduce using rule 45 (constant -> STRING .)
    NOT_EQUAL       reduce using rule 45 (constant -> STRING .)
    EQ_GREATER_THAN reduce using rule 45 (constant -> STRING .)
    EQ_LESS_THAN    reduce using rule 45 (constant -> STRING .)
    AND             reduce using rule 45 (constant -> STRING .)
    OR              reduce using rule 45 (constant -> STRING .)
    END             reduce using rule 45 (constant -> STRING .)
    IF              reduce using rule 45 (constant -> STRING .)
    ID              reduce using rule 45 (constant -> STRING .)
    DEF             reduce using rule 45 (constant -> STRING .)
    DEFP            reduce using rule 45 (constant -> STRING .)
    DO              reduce using rule 45 (constant -> STRING .)
    RETURN          reduce using rule 45 (constant -> STRING .)
    CONST           reduce using rule 45 (constant -> STRING .)
    MUT             reduce using rule 45 (constant -> STRING .)
    NUMBER          reduce using rule 45 (constant -> STRING .)
    STRING          reduce using rule 45 (constant -> STRING .)
    (               reduce using rule 45 (constant -> STRING .)
    )               reduce using rule 45 (constant -> STRING .)
    ,               reduce using rule 45 (constant -> STRING .)
    ELSE_IF         reduce using rule 45 (constant -> STRING .)
    ELSE            reduce using rule 45 (constant -> STRING .)


state 15

    (29) expression -> constant .

    )               reduce using rule 29 (expression -> constant .)
    +               reduce using rule 29 (expression -> constant .)
    -               reduce using rule 29 (expression -> constant .)
    *               reduce using rule 29 (expression -> constant .)
    /               reduce using rule 29 (expression -> constant .)
    ^               reduce using rule 29 (expression -> constant .)
    %               reduce using rule 29 (expression -> constant .)
    GREATER_THAN    reduce using rule 29 (expression -> constant .)
    LESS_THAN       reduce using rule 29 (expression -> constant .)
    EQUAL           reduce using rule 29 (expression -> constant .)
    NOT_EQUAL       reduce using rule 29 (expression -> constant .)
    EQ_GREATER_THAN reduce using rule 29 (expression -> constant .)
    EQ_LESS_THAN    reduce using rule 29 (expression -> constant .)
    AND             reduce using rule 29 (expression -> constant .)
    OR              reduce using rule 29 (expression -> constant .)
    IF              reduce using rule 29 (expression -> constant .)
    ID              reduce using rule 29 (expression -> constant .)
    DEF             reduce using rule 29 (expression -> constant .)
    DEFP            reduce using rule 29 (expression -> constant .)
    DO              reduce using rule 29 (expression -> constant .)
    RETURN          reduce using rule 29 (expression -> constant .)
    CONST           reduce using rule 29 (expression -> constant .)
    MUT             reduce using rule 29 (expression -> constant .)
    NUMBER          reduce using rule 29 (expression -> constant .)
    STRING          reduce using rule 29 (expression -> constant .)
    (               reduce using rule 29 (expression -> constant .)
    END             reduce using rule 29 (expression -> constant .)
    ELSE_IF         reduce using rule 29 (expression -> constant .)
    ELSE            reduce using rule 29 (expression -> constant .)
    ,               reduce using rule 29 (expression -> constant .)


state 16

    (28) do_block -> DO statements . END
    (6) statements -> statements . statement
    (7) statement -> . if_statement
    (8) statement -> . assignment
    (9) statement -> . function_definition
    (10) statement -> . private_function_definition
    (11) statement -> . do_block
    (12) statement -> . expression
    (13) statement -> . return_statement
    (54) if_statement -> . IF ( expression ) DO statements else_blocks
    (17) assignment -> . ID = expression
    (18) assignment -> . assignment_qualifier ID = expression
    (19) function_definition -> . DEF ID ( def_argument_list ) do_block
    (20) private_function_definition -> . DEFP ID ( def_argument_list ) do_block
    (27) do_block -> . DO END
    (28) do_block -> . DO statements END
    (29) expression -> . constant
    (30) expression -> . expression + constant
    (31) expression -> . expression - constant
    (32) expression -> . expression * constant
    (33) expression -> . expression / constant
    (34) expression -> . expression ^ constant
    (35) expression -> . expression % constant
    (36) expression -> . expression GREATER_THAN constant
    (37) expression -> . expression LESS_THAN constant
    (38) expression -> . expression EQUAL constant
    (39) expression -> . expression NOT_EQUAL constant
    (40) expression -> . expression EQ_GREATER_THAN constant
    (41) expression -> . expression EQ_LESS_THAN constant
    (42) expression -> . expression AND constant
    (43) expression -> . expression OR constant
    (14) return_statement -> . RETURN expression
    (15) assignment_qualifier -> . CONST
    (16) assignment_qualifier -> . MUT
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    END             shift and go to state 31
    IF              shift and go to state 24
    ID              shift and go to state 23
    DEF             shift and go to state 17
    DEFP            shift and go to state 26
    DO              shift and go to state 7
    RETURN          shift and go to state 28
    CONST           shift and go to state 9
    MUT             shift and go to state 10
    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    (               shift and go to state 21

    function_definition            shift and go to state 11
    do_block                       shift and go to state 22
    return_statement               shift and go to state 12
    constant                       shift and go to state 15
    assignment                     shift and go to state 27
    statement                      shift and go to state 32
    function_call                  shift and go to state 19
    assignment_qualifier           shift and go to state 18
    expression                     shift and go to state 20
    private_function_definition    shift and go to state 29
    if_statement                   shift and go to state 25

state 17

    (19) function_definition -> DEF . ID ( def_argument_list ) do_block

    ID              shift and go to state 33


state 18

    (18) assignment -> assignment_qualifier . ID = expression

    ID              shift and go to state 34


state 19

    (46) constant -> function_call .

    +               reduce using rule 46 (constant -> function_call .)
    -               reduce using rule 46 (constant -> function_call .)
    *               reduce using rule 46 (constant -> function_call .)
    /               reduce using rule 46 (constant -> function_call .)
    ^               reduce using rule 46 (constant -> function_call .)
    %               reduce using rule 46 (constant -> function_call .)
    GREATER_THAN    reduce using rule 46 (constant -> function_call .)
    LESS_THAN       reduce using rule 46 (constant -> function_call .)
    EQUAL           reduce using rule 46 (constant -> function_call .)
    NOT_EQUAL       reduce using rule 46 (constant -> function_call .)
    EQ_GREATER_THAN reduce using rule 46 (constant -> function_call .)
    EQ_LESS_THAN    reduce using rule 46 (constant -> function_call .)
    AND             reduce using rule 46 (constant -> function_call .)
    OR              reduce using rule 46 (constant -> function_call .)
    END             reduce using rule 46 (constant -> function_call .)
    IF              reduce using rule 46 (constant -> function_call .)
    ID              reduce using rule 46 (constant -> function_call .)
    DEF             reduce using rule 46 (constant -> function_call .)
    DEFP            reduce using rule 46 (constant -> function_call .)
    DO              reduce using rule 46 (constant -> function_call .)
    RETURN          reduce using rule 46 (constant -> function_call .)
    CONST           reduce using rule 46 (constant -> function_call .)
    MUT             reduce using rule 46 (constant -> function_call .)
    NUMBER          reduce using rule 46 (constant -> function_call .)
    STRING          reduce using rule 46 (constant -> function_call .)
    (               reduce using rule 46 (constant -> function_call .)
    )               reduce using rule 46 (constant -> function_call .)
    ,               reduce using rule 46 (constant -> function_call .)
    ELSE_IF         reduce using rule 46 (constant -> function_call .)
    ELSE            reduce using rule 46 (constant -> function_call .)


state 20

    (12) statement -> expression .
    (30) expression -> expression . + constant
    (31) expression -> expression . - constant
    (32) expression -> expression . * constant
    (33) expression -> expression . / constant
    (34) expression -> expression . ^ constant
    (35) expression -> expression . % constant
    (36) expression -> expression . GREATER_THAN constant
    (37) expression -> expression . LESS_THAN constant
    (38) expression -> expression . EQUAL constant
    (39) expression -> expression . NOT_EQUAL constant
    (40) expression -> expression . EQ_GREATER_THAN constant
    (41) expression -> expression . EQ_LESS_THAN constant
    (42) expression -> expression . AND constant
    (43) expression -> expression . OR constant

    END             reduce using rule 12 (statement -> expression .)
    IF              reduce using rule 12 (statement -> expression .)
    ID              reduce using rule 12 (statement -> expression .)
    DEF             reduce using rule 12 (statement -> expression .)
    DEFP            reduce using rule 12 (statement -> expression .)
    DO              reduce using rule 12 (statement -> expression .)
    RETURN          reduce using rule 12 (statement -> expression .)
    CONST           reduce using rule 12 (statement -> expression .)
    MUT             reduce using rule 12 (statement -> expression .)
    NUMBER          reduce using rule 12 (statement -> expression .)
    STRING          reduce using rule 12 (statement -> expression .)
    (               reduce using rule 12 (statement -> expression .)
    ELSE_IF         reduce using rule 12 (statement -> expression .)
    ELSE            reduce using rule 12 (statement -> expression .)
    +               shift and go to state 40
    -               shift and go to state 38
    *               shift and go to state 35
    /               shift and go to state 47
    ^               shift and go to state 44
    %               shift and go to state 46
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 43
    EQUAL           shift and go to state 42
    NOT_EQUAL       shift and go to state 37
    EQ_GREATER_THAN shift and go to state 39
    EQ_LESS_THAN    shift and go to state 45
    AND             shift and go to state 41
    OR              shift and go to state 48


state 21

    (48) constant -> ( . expression )
    (29) expression -> . constant
    (30) expression -> . expression + constant
    (31) expression -> . expression - constant
    (32) expression -> . expression * constant
    (33) expression -> . expression / constant
    (34) expression -> . expression ^ constant
    (35) expression -> . expression % constant
    (36) expression -> . expression GREATER_THAN constant
    (37) expression -> . expression LESS_THAN constant
    (38) expression -> . expression EQUAL constant
    (39) expression -> . expression NOT_EQUAL constant
    (40) expression -> . expression EQ_GREATER_THAN constant
    (41) expression -> . expression EQ_LESS_THAN constant
    (42) expression -> . expression AND constant
    (43) expression -> . expression OR constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 15
    expression                     shift and go to state 49

state 22

    (11) statement -> do_block .

    END             reduce using rule 11 (statement -> do_block .)
    IF              reduce using rule 11 (statement -> do_block .)
    ID              reduce using rule 11 (statement -> do_block .)
    DEF             reduce using rule 11 (statement -> do_block .)
    DEFP            reduce using rule 11 (statement -> do_block .)
    DO              reduce using rule 11 (statement -> do_block .)
    RETURN          reduce using rule 11 (statement -> do_block .)
    CONST           reduce using rule 11 (statement -> do_block .)
    MUT             reduce using rule 11 (statement -> do_block .)
    NUMBER          reduce using rule 11 (statement -> do_block .)
    STRING          reduce using rule 11 (statement -> do_block .)
    (               reduce using rule 11 (statement -> do_block .)
    ELSE_IF         reduce using rule 11 (statement -> do_block .)
    ELSE            reduce using rule 11 (statement -> do_block .)


state 23

    (17) assignment -> ID . = expression
    (47) constant -> ID .
    (49) function_call -> ID . ( argument_list )

    =               shift and go to state 51
    +               reduce using rule 47 (constant -> ID .)
    -               reduce using rule 47 (constant -> ID .)
    *               reduce using rule 47 (constant -> ID .)
    /               reduce using rule 47 (constant -> ID .)
    ^               reduce using rule 47 (constant -> ID .)
    %               reduce using rule 47 (constant -> ID .)
    GREATER_THAN    reduce using rule 47 (constant -> ID .)
    LESS_THAN       reduce using rule 47 (constant -> ID .)
    EQUAL           reduce using rule 47 (constant -> ID .)
    NOT_EQUAL       reduce using rule 47 (constant -> ID .)
    EQ_GREATER_THAN reduce using rule 47 (constant -> ID .)
    EQ_LESS_THAN    reduce using rule 47 (constant -> ID .)
    AND             reduce using rule 47 (constant -> ID .)
    OR              reduce using rule 47 (constant -> ID .)
    END             reduce using rule 47 (constant -> ID .)
    IF              reduce using rule 47 (constant -> ID .)
    ID              reduce using rule 47 (constant -> ID .)
    DEF             reduce using rule 47 (constant -> ID .)
    DEFP            reduce using rule 47 (constant -> ID .)
    DO              reduce using rule 47 (constant -> ID .)
    RETURN          reduce using rule 47 (constant -> ID .)
    CONST           reduce using rule 47 (constant -> ID .)
    MUT             reduce using rule 47 (constant -> ID .)
    NUMBER          reduce using rule 47 (constant -> ID .)
    STRING          reduce using rule 47 (constant -> ID .)
    (               reduce using rule 47 (constant -> ID .)
    ELSE_IF         reduce using rule 47 (constant -> ID .)
    ELSE            reduce using rule 47 (constant -> ID .)

  ! (               [ shift and go to state 52 ]


state 24

    (54) if_statement -> IF . ( expression ) DO statements else_blocks

    (               shift and go to state 53


state 25

    (7) statement -> if_statement .

    END             reduce using rule 7 (statement -> if_statement .)
    IF              reduce using rule 7 (statement -> if_statement .)
    ID              reduce using rule 7 (statement -> if_statement .)
    DEF             reduce using rule 7 (statement -> if_statement .)
    DEFP            reduce using rule 7 (statement -> if_statement .)
    DO              reduce using rule 7 (statement -> if_statement .)
    RETURN          reduce using rule 7 (statement -> if_statement .)
    CONST           reduce using rule 7 (statement -> if_statement .)
    MUT             reduce using rule 7 (statement -> if_statement .)
    NUMBER          reduce using rule 7 (statement -> if_statement .)
    STRING          reduce using rule 7 (statement -> if_statement .)
    (               reduce using rule 7 (statement -> if_statement .)
    ELSE_IF         reduce using rule 7 (statement -> if_statement .)
    ELSE            reduce using rule 7 (statement -> if_statement .)


state 26

    (20) private_function_definition -> DEFP . ID ( def_argument_list ) do_block

    ID              shift and go to state 54


state 27

    (8) statement -> assignment .

    END             reduce using rule 8 (statement -> assignment .)
    IF              reduce using rule 8 (statement -> assignment .)
    ID              reduce using rule 8 (statement -> assignment .)
    DEF             reduce using rule 8 (statement -> assignment .)
    DEFP            reduce using rule 8 (statement -> assignment .)
    DO              reduce using rule 8 (statement -> assignment .)
    RETURN          reduce using rule 8 (statement -> assignment .)
    CONST           reduce using rule 8 (statement -> assignment .)
    MUT             reduce using rule 8 (statement -> assignment .)
    NUMBER          reduce using rule 8 (statement -> assignment .)
    STRING          reduce using rule 8 (statement -> assignment .)
    (               reduce using rule 8 (statement -> assignment .)
    ELSE_IF         reduce using rule 8 (statement -> assignment .)
    ELSE            reduce using rule 8 (statement -> assignment .)


state 28

    (14) return_statement -> RETURN . expression
    (29) expression -> . constant
    (30) expression -> . expression + constant
    (31) expression -> . expression - constant
    (32) expression -> . expression * constant
    (33) expression -> . expression / constant
    (34) expression -> . expression ^ constant
    (35) expression -> . expression % constant
    (36) expression -> . expression GREATER_THAN constant
    (37) expression -> . expression LESS_THAN constant
    (38) expression -> . expression EQUAL constant
    (39) expression -> . expression NOT_EQUAL constant
    (40) expression -> . expression EQ_GREATER_THAN constant
    (41) expression -> . expression EQ_LESS_THAN constant
    (42) expression -> . expression AND constant
    (43) expression -> . expression OR constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 15
    expression                     shift and go to state 55

state 29

    (10) statement -> private_function_definition .

    END             reduce using rule 10 (statement -> private_function_definition .)
    IF              reduce using rule 10 (statement -> private_function_definition .)
    ID              reduce using rule 10 (statement -> private_function_definition .)
    DEF             reduce using rule 10 (statement -> private_function_definition .)
    DEFP            reduce using rule 10 (statement -> private_function_definition .)
    DO              reduce using rule 10 (statement -> private_function_definition .)
    RETURN          reduce using rule 10 (statement -> private_function_definition .)
    CONST           reduce using rule 10 (statement -> private_function_definition .)
    MUT             reduce using rule 10 (statement -> private_function_definition .)
    NUMBER          reduce using rule 10 (statement -> private_function_definition .)
    STRING          reduce using rule 10 (statement -> private_function_definition .)
    (               reduce using rule 10 (statement -> private_function_definition .)
    ELSE_IF         reduce using rule 10 (statement -> private_function_definition .)
    ELSE            reduce using rule 10 (statement -> private_function_definition .)


state 30

    (5) statements -> statement .

    END             reduce using rule 5 (statements -> statement .)
    IF              reduce using rule 5 (statements -> statement .)
    ID              reduce using rule 5 (statements -> statement .)
    DEF             reduce using rule 5 (statements -> statement .)
    DEFP            reduce using rule 5 (statements -> statement .)
    DO              reduce using rule 5 (statements -> statement .)
    RETURN          reduce using rule 5 (statements -> statement .)
    CONST           reduce using rule 5 (statements -> statement .)
    MUT             reduce using rule 5 (statements -> statement .)
    NUMBER          reduce using rule 5 (statements -> statement .)
    STRING          reduce using rule 5 (statements -> statement .)
    (               reduce using rule 5 (statements -> statement .)
    ELSE_IF         reduce using rule 5 (statements -> statement .)
    ELSE            reduce using rule 5 (statements -> statement .)


state 31

    (28) do_block -> DO statements END .

    END             reduce using rule 28 (do_block -> DO statements END .)
    ELSE_IF         reduce using rule 28 (do_block -> DO statements END .)
    ELSE            reduce using rule 28 (do_block -> DO statements END .)
    IF              reduce using rule 28 (do_block -> DO statements END .)
    ID              reduce using rule 28 (do_block -> DO statements END .)
    DEF             reduce using rule 28 (do_block -> DO statements END .)
    DEFP            reduce using rule 28 (do_block -> DO statements END .)
    DO              reduce using rule 28 (do_block -> DO statements END .)
    RETURN          reduce using rule 28 (do_block -> DO statements END .)
    CONST           reduce using rule 28 (do_block -> DO statements END .)
    MUT             reduce using rule 28 (do_block -> DO statements END .)
    NUMBER          reduce using rule 28 (do_block -> DO statements END .)
    STRING          reduce using rule 28 (do_block -> DO statements END .)
    (               reduce using rule 28 (do_block -> DO statements END .)
    DEFMODULE       reduce using rule 28 (do_block -> DO statements END .)
    $end            reduce using rule 28 (do_block -> DO statements END .)


state 32

    (6) statements -> statements statement .

    END             reduce using rule 6 (statements -> statements statement .)
    IF              reduce using rule 6 (statements -> statements statement .)
    ID              reduce using rule 6 (statements -> statements statement .)
    DEF             reduce using rule 6 (statements -> statements statement .)
    DEFP            reduce using rule 6 (statements -> statements statement .)
    DO              reduce using rule 6 (statements -> statements statement .)
    RETURN          reduce using rule 6 (statements -> statements statement .)
    CONST           reduce using rule 6 (statements -> statements statement .)
    MUT             reduce using rule 6 (statements -> statements statement .)
    NUMBER          reduce using rule 6 (statements -> statements statement .)
    STRING          reduce using rule 6 (statements -> statements statement .)
    (               reduce using rule 6 (statements -> statements statement .)
    ELSE_IF         reduce using rule 6 (statements -> statements statement .)
    ELSE            reduce using rule 6 (statements -> statements statement .)


state 33

    (19) function_definition -> DEF ID . ( def_argument_list ) do_block

    (               shift and go to state 56


state 34

    (18) assignment -> assignment_qualifier ID . = expression

    =               shift and go to state 57


state 35

    (32) expression -> expression * . constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 58

state 36

    (36) expression -> expression GREATER_THAN . constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 59

state 37

    (39) expression -> expression NOT_EQUAL . constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 60

state 38

    (31) expression -> expression - . constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 61

state 39

    (40) expression -> expression EQ_GREATER_THAN . constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 62

state 40

    (30) expression -> expression + . constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 63

state 41

    (42) expression -> expression AND . constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 64

state 42

    (38) expression -> expression EQUAL . constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 65

state 43

    (37) expression -> expression LESS_THAN . constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 66

state 44

    (34) expression -> expression ^ . constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 67

state 45

    (41) expression -> expression EQ_LESS_THAN . constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 68

state 46

    (35) expression -> expression % . constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 69

state 47

    (33) expression -> expression / . constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 70

state 48

    (43) expression -> expression OR . constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 71

state 49

    (48) constant -> ( expression . )
    (30) expression -> expression . + constant
    (31) expression -> expression . - constant
    (32) expression -> expression . * constant
    (33) expression -> expression . / constant
    (34) expression -> expression . ^ constant
    (35) expression -> expression . % constant
    (36) expression -> expression . GREATER_THAN constant
    (37) expression -> expression . LESS_THAN constant
    (38) expression -> expression . EQUAL constant
    (39) expression -> expression . NOT_EQUAL constant
    (40) expression -> expression . EQ_GREATER_THAN constant
    (41) expression -> expression . EQ_LESS_THAN constant
    (42) expression -> expression . AND constant
    (43) expression -> expression . OR constant

    )               shift and go to state 72
    +               shift and go to state 40
    -               shift and go to state 38
    *               shift and go to state 35
    /               shift and go to state 47
    ^               shift and go to state 44
    %               shift and go to state 46
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 43
    EQUAL           shift and go to state 42
    NOT_EQUAL       shift and go to state 37
    EQ_GREATER_THAN shift and go to state 39
    EQ_LESS_THAN    shift and go to state 45
    AND             shift and go to state 41
    OR              shift and go to state 48


state 50

    (47) constant -> ID .
    (49) function_call -> ID . ( argument_list )

    +               reduce using rule 47 (constant -> ID .)
    -               reduce using rule 47 (constant -> ID .)
    *               reduce using rule 47 (constant -> ID .)
    /               reduce using rule 47 (constant -> ID .)
    ^               reduce using rule 47 (constant -> ID .)
    %               reduce using rule 47 (constant -> ID .)
    GREATER_THAN    reduce using rule 47 (constant -> ID .)
    LESS_THAN       reduce using rule 47 (constant -> ID .)
    EQUAL           reduce using rule 47 (constant -> ID .)
    NOT_EQUAL       reduce using rule 47 (constant -> ID .)
    EQ_GREATER_THAN reduce using rule 47 (constant -> ID .)
    EQ_LESS_THAN    reduce using rule 47 (constant -> ID .)
    AND             reduce using rule 47 (constant -> ID .)
    OR              reduce using rule 47 (constant -> ID .)
    END             reduce using rule 47 (constant -> ID .)
    IF              reduce using rule 47 (constant -> ID .)
    ID              reduce using rule 47 (constant -> ID .)
    DEF             reduce using rule 47 (constant -> ID .)
    DEFP            reduce using rule 47 (constant -> ID .)
    DO              reduce using rule 47 (constant -> ID .)
    RETURN          reduce using rule 47 (constant -> ID .)
    CONST           reduce using rule 47 (constant -> ID .)
    MUT             reduce using rule 47 (constant -> ID .)
    NUMBER          reduce using rule 47 (constant -> ID .)
    STRING          reduce using rule 47 (constant -> ID .)
    (               reduce using rule 47 (constant -> ID .)
    )               reduce using rule 47 (constant -> ID .)
    ,               reduce using rule 47 (constant -> ID .)
    ELSE_IF         reduce using rule 47 (constant -> ID .)
    ELSE            reduce using rule 47 (constant -> ID .)

  ! (               [ shift and go to state 52 ]


state 51

    (17) assignment -> ID = . expression
    (29) expression -> . constant
    (30) expression -> . expression + constant
    (31) expression -> . expression - constant
    (32) expression -> . expression * constant
    (33) expression -> . expression / constant
    (34) expression -> . expression ^ constant
    (35) expression -> . expression % constant
    (36) expression -> . expression GREATER_THAN constant
    (37) expression -> . expression LESS_THAN constant
    (38) expression -> . expression EQUAL constant
    (39) expression -> . expression NOT_EQUAL constant
    (40) expression -> . expression EQ_GREATER_THAN constant
    (41) expression -> . expression EQ_LESS_THAN constant
    (42) expression -> . expression AND constant
    (43) expression -> . expression OR constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 15
    expression                     shift and go to state 73

state 52

    (49) function_call -> ID ( . argument_list )
    (51) argument_list -> . empty
    (52) argument_list -> . argument
    (53) argument_list -> . argument_list , argument
    (1) empty -> .
    (50) argument -> . expression
    (29) expression -> . constant
    (30) expression -> . expression + constant
    (31) expression -> . expression - constant
    (32) expression -> . expression * constant
    (33) expression -> . expression / constant
    (34) expression -> . expression ^ constant
    (35) expression -> . expression % constant
    (36) expression -> . expression GREATER_THAN constant
    (37) expression -> . expression LESS_THAN constant
    (38) expression -> . expression EQUAL constant
    (39) expression -> . expression NOT_EQUAL constant
    (40) expression -> . expression EQ_GREATER_THAN constant
    (41) expression -> . expression EQ_LESS_THAN constant
    (42) expression -> . expression AND constant
    (43) expression -> . expression OR constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    )               reduce using rule 1 (empty -> .)
    ,               reduce using rule 1 (empty -> .)
    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    argument                       shift and go to state 75
    constant                       shift and go to state 15
    expression                     shift and go to state 76
    function_call                  shift and go to state 19
    empty                          shift and go to state 74
    argument_list                  shift and go to state 77

state 53

    (54) if_statement -> IF ( . expression ) DO statements else_blocks
    (29) expression -> . constant
    (30) expression -> . expression + constant
    (31) expression -> . expression - constant
    (32) expression -> . expression * constant
    (33) expression -> . expression / constant
    (34) expression -> . expression ^ constant
    (35) expression -> . expression % constant
    (36) expression -> . expression GREATER_THAN constant
    (37) expression -> . expression LESS_THAN constant
    (38) expression -> . expression EQUAL constant
    (39) expression -> . expression NOT_EQUAL constant
    (40) expression -> . expression EQ_GREATER_THAN constant
    (41) expression -> . expression EQ_LESS_THAN constant
    (42) expression -> . expression AND constant
    (43) expression -> . expression OR constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    constant                       shift and go to state 15
    function_call                  shift and go to state 19
    expression                     shift and go to state 78

state 54

    (20) private_function_definition -> DEFP ID . ( def_argument_list ) do_block

    (               shift and go to state 79


state 55

    (14) return_statement -> RETURN expression .
    (30) expression -> expression . + constant
    (31) expression -> expression . - constant
    (32) expression -> expression . * constant
    (33) expression -> expression . / constant
    (34) expression -> expression . ^ constant
    (35) expression -> expression . % constant
    (36) expression -> expression . GREATER_THAN constant
    (37) expression -> expression . LESS_THAN constant
    (38) expression -> expression . EQUAL constant
    (39) expression -> expression . NOT_EQUAL constant
    (40) expression -> expression . EQ_GREATER_THAN constant
    (41) expression -> expression . EQ_LESS_THAN constant
    (42) expression -> expression . AND constant
    (43) expression -> expression . OR constant

    END             reduce using rule 14 (return_statement -> RETURN expression .)
    ELSE_IF         reduce using rule 14 (return_statement -> RETURN expression .)
    ELSE            reduce using rule 14 (return_statement -> RETURN expression .)
    IF              reduce using rule 14 (return_statement -> RETURN expression .)
    ID              reduce using rule 14 (return_statement -> RETURN expression .)
    DEF             reduce using rule 14 (return_statement -> RETURN expression .)
    DEFP            reduce using rule 14 (return_statement -> RETURN expression .)
    DO              reduce using rule 14 (return_statement -> RETURN expression .)
    RETURN          reduce using rule 14 (return_statement -> RETURN expression .)
    CONST           reduce using rule 14 (return_statement -> RETURN expression .)
    MUT             reduce using rule 14 (return_statement -> RETURN expression .)
    NUMBER          reduce using rule 14 (return_statement -> RETURN expression .)
    STRING          reduce using rule 14 (return_statement -> RETURN expression .)
    (               reduce using rule 14 (return_statement -> RETURN expression .)
    +               shift and go to state 40
    -               shift and go to state 38
    *               shift and go to state 35
    /               shift and go to state 47
    ^               shift and go to state 44
    %               shift and go to state 46
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 43
    EQUAL           shift and go to state 42
    NOT_EQUAL       shift and go to state 37
    EQ_GREATER_THAN shift and go to state 39
    EQ_LESS_THAN    shift and go to state 45
    AND             shift and go to state 41
    OR              shift and go to state 48


state 56

    (19) function_definition -> DEF ID ( . def_argument_list ) do_block
    (24) def_argument_list -> . empty
    (25) def_argument_list -> . def_argument
    (26) def_argument_list -> . def_argument_list , def_argument
    (1) empty -> .
    (21) def_argument -> . ID
    (22) def_argument -> . assignment_qualifier ID
    (23) def_argument -> . assignment
    (15) assignment_qualifier -> . CONST
    (16) assignment_qualifier -> . MUT
    (17) assignment -> . ID = expression
    (18) assignment -> . assignment_qualifier ID = expression

    )               reduce using rule 1 (empty -> .)
    ,               reduce using rule 1 (empty -> .)
    ID              shift and go to state 83
    CONST           shift and go to state 9
    MUT             shift and go to state 10

    def_argument_list              shift and go to state 80
    assignment_qualifier           shift and go to state 85
    empty                          shift and go to state 81
    def_argument                   shift and go to state 82
    assignment                     shift and go to state 84

state 57

    (18) assignment -> assignment_qualifier ID = . expression
    (29) expression -> . constant
    (30) expression -> . expression + constant
    (31) expression -> . expression - constant
    (32) expression -> . expression * constant
    (33) expression -> . expression / constant
    (34) expression -> . expression ^ constant
    (35) expression -> . expression % constant
    (36) expression -> . expression GREATER_THAN constant
    (37) expression -> . expression LESS_THAN constant
    (38) expression -> . expression EQUAL constant
    (39) expression -> . expression NOT_EQUAL constant
    (40) expression -> . expression EQ_GREATER_THAN constant
    (41) expression -> . expression EQ_LESS_THAN constant
    (42) expression -> . expression AND constant
    (43) expression -> . expression OR constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    function_call                  shift and go to state 19
    constant                       shift and go to state 15
    expression                     shift and go to state 86

state 58

    (32) expression -> expression * constant .

    )               reduce using rule 32 (expression -> expression * constant .)
    +               reduce using rule 32 (expression -> expression * constant .)
    -               reduce using rule 32 (expression -> expression * constant .)
    *               reduce using rule 32 (expression -> expression * constant .)
    /               reduce using rule 32 (expression -> expression * constant .)
    ^               reduce using rule 32 (expression -> expression * constant .)
    %               reduce using rule 32 (expression -> expression * constant .)
    GREATER_THAN    reduce using rule 32 (expression -> expression * constant .)
    LESS_THAN       reduce using rule 32 (expression -> expression * constant .)
    EQUAL           reduce using rule 32 (expression -> expression * constant .)
    NOT_EQUAL       reduce using rule 32 (expression -> expression * constant .)
    EQ_GREATER_THAN reduce using rule 32 (expression -> expression * constant .)
    EQ_LESS_THAN    reduce using rule 32 (expression -> expression * constant .)
    AND             reduce using rule 32 (expression -> expression * constant .)
    OR              reduce using rule 32 (expression -> expression * constant .)
    IF              reduce using rule 32 (expression -> expression * constant .)
    ID              reduce using rule 32 (expression -> expression * constant .)
    DEF             reduce using rule 32 (expression -> expression * constant .)
    DEFP            reduce using rule 32 (expression -> expression * constant .)
    DO              reduce using rule 32 (expression -> expression * constant .)
    RETURN          reduce using rule 32 (expression -> expression * constant .)
    CONST           reduce using rule 32 (expression -> expression * constant .)
    MUT             reduce using rule 32 (expression -> expression * constant .)
    NUMBER          reduce using rule 32 (expression -> expression * constant .)
    STRING          reduce using rule 32 (expression -> expression * constant .)
    (               reduce using rule 32 (expression -> expression * constant .)
    END             reduce using rule 32 (expression -> expression * constant .)
    ELSE_IF         reduce using rule 32 (expression -> expression * constant .)
    ELSE            reduce using rule 32 (expression -> expression * constant .)
    ,               reduce using rule 32 (expression -> expression * constant .)


state 59

    (36) expression -> expression GREATER_THAN constant .

    )               reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    +               reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    -               reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    *               reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    /               reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    ^               reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    %               reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    GREATER_THAN    reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    LESS_THAN       reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    EQUAL           reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    NOT_EQUAL       reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    EQ_GREATER_THAN reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    EQ_LESS_THAN    reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    AND             reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    OR              reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    IF              reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    ID              reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    DEF             reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    DEFP            reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    DO              reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    RETURN          reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    CONST           reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    MUT             reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    NUMBER          reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    STRING          reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    (               reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    END             reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    ELSE_IF         reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    ELSE            reduce using rule 36 (expression -> expression GREATER_THAN constant .)
    ,               reduce using rule 36 (expression -> expression GREATER_THAN constant .)


state 60

    (39) expression -> expression NOT_EQUAL constant .

    )               reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    +               reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    -               reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    *               reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    /               reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    ^               reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    %               reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    GREATER_THAN    reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    LESS_THAN       reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    EQUAL           reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    NOT_EQUAL       reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    EQ_GREATER_THAN reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    EQ_LESS_THAN    reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    AND             reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    OR              reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    IF              reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    ID              reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    DEF             reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    DEFP            reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    DO              reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    RETURN          reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    CONST           reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    MUT             reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    NUMBER          reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    STRING          reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    (               reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    END             reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    ELSE_IF         reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    ELSE            reduce using rule 39 (expression -> expression NOT_EQUAL constant .)
    ,               reduce using rule 39 (expression -> expression NOT_EQUAL constant .)


state 61

    (31) expression -> expression - constant .

    )               reduce using rule 31 (expression -> expression - constant .)
    +               reduce using rule 31 (expression -> expression - constant .)
    -               reduce using rule 31 (expression -> expression - constant .)
    *               reduce using rule 31 (expression -> expression - constant .)
    /               reduce using rule 31 (expression -> expression - constant .)
    ^               reduce using rule 31 (expression -> expression - constant .)
    %               reduce using rule 31 (expression -> expression - constant .)
    GREATER_THAN    reduce using rule 31 (expression -> expression - constant .)
    LESS_THAN       reduce using rule 31 (expression -> expression - constant .)
    EQUAL           reduce using rule 31 (expression -> expression - constant .)
    NOT_EQUAL       reduce using rule 31 (expression -> expression - constant .)
    EQ_GREATER_THAN reduce using rule 31 (expression -> expression - constant .)
    EQ_LESS_THAN    reduce using rule 31 (expression -> expression - constant .)
    AND             reduce using rule 31 (expression -> expression - constant .)
    OR              reduce using rule 31 (expression -> expression - constant .)
    IF              reduce using rule 31 (expression -> expression - constant .)
    ID              reduce using rule 31 (expression -> expression - constant .)
    DEF             reduce using rule 31 (expression -> expression - constant .)
    DEFP            reduce using rule 31 (expression -> expression - constant .)
    DO              reduce using rule 31 (expression -> expression - constant .)
    RETURN          reduce using rule 31 (expression -> expression - constant .)
    CONST           reduce using rule 31 (expression -> expression - constant .)
    MUT             reduce using rule 31 (expression -> expression - constant .)
    NUMBER          reduce using rule 31 (expression -> expression - constant .)
    STRING          reduce using rule 31 (expression -> expression - constant .)
    (               reduce using rule 31 (expression -> expression - constant .)
    END             reduce using rule 31 (expression -> expression - constant .)
    ELSE_IF         reduce using rule 31 (expression -> expression - constant .)
    ELSE            reduce using rule 31 (expression -> expression - constant .)
    ,               reduce using rule 31 (expression -> expression - constant .)


state 62

    (40) expression -> expression EQ_GREATER_THAN constant .

    )               reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    +               reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    -               reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    *               reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    /               reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    ^               reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    %               reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    GREATER_THAN    reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    LESS_THAN       reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    EQUAL           reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    NOT_EQUAL       reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    EQ_GREATER_THAN reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    EQ_LESS_THAN    reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    AND             reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    OR              reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    IF              reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    ID              reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    DEF             reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    DEFP            reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    DO              reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    RETURN          reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    CONST           reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    MUT             reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    NUMBER          reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    STRING          reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    (               reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    END             reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    ELSE_IF         reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    ELSE            reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)
    ,               reduce using rule 40 (expression -> expression EQ_GREATER_THAN constant .)


state 63

    (30) expression -> expression + constant .

    )               reduce using rule 30 (expression -> expression + constant .)
    +               reduce using rule 30 (expression -> expression + constant .)
    -               reduce using rule 30 (expression -> expression + constant .)
    *               reduce using rule 30 (expression -> expression + constant .)
    /               reduce using rule 30 (expression -> expression + constant .)
    ^               reduce using rule 30 (expression -> expression + constant .)
    %               reduce using rule 30 (expression -> expression + constant .)
    GREATER_THAN    reduce using rule 30 (expression -> expression + constant .)
    LESS_THAN       reduce using rule 30 (expression -> expression + constant .)
    EQUAL           reduce using rule 30 (expression -> expression + constant .)
    NOT_EQUAL       reduce using rule 30 (expression -> expression + constant .)
    EQ_GREATER_THAN reduce using rule 30 (expression -> expression + constant .)
    EQ_LESS_THAN    reduce using rule 30 (expression -> expression + constant .)
    AND             reduce using rule 30 (expression -> expression + constant .)
    OR              reduce using rule 30 (expression -> expression + constant .)
    IF              reduce using rule 30 (expression -> expression + constant .)
    ID              reduce using rule 30 (expression -> expression + constant .)
    DEF             reduce using rule 30 (expression -> expression + constant .)
    DEFP            reduce using rule 30 (expression -> expression + constant .)
    DO              reduce using rule 30 (expression -> expression + constant .)
    RETURN          reduce using rule 30 (expression -> expression + constant .)
    CONST           reduce using rule 30 (expression -> expression + constant .)
    MUT             reduce using rule 30 (expression -> expression + constant .)
    NUMBER          reduce using rule 30 (expression -> expression + constant .)
    STRING          reduce using rule 30 (expression -> expression + constant .)
    (               reduce using rule 30 (expression -> expression + constant .)
    END             reduce using rule 30 (expression -> expression + constant .)
    ELSE_IF         reduce using rule 30 (expression -> expression + constant .)
    ELSE            reduce using rule 30 (expression -> expression + constant .)
    ,               reduce using rule 30 (expression -> expression + constant .)


state 64

    (42) expression -> expression AND constant .

    )               reduce using rule 42 (expression -> expression AND constant .)
    +               reduce using rule 42 (expression -> expression AND constant .)
    -               reduce using rule 42 (expression -> expression AND constant .)
    *               reduce using rule 42 (expression -> expression AND constant .)
    /               reduce using rule 42 (expression -> expression AND constant .)
    ^               reduce using rule 42 (expression -> expression AND constant .)
    %               reduce using rule 42 (expression -> expression AND constant .)
    GREATER_THAN    reduce using rule 42 (expression -> expression AND constant .)
    LESS_THAN       reduce using rule 42 (expression -> expression AND constant .)
    EQUAL           reduce using rule 42 (expression -> expression AND constant .)
    NOT_EQUAL       reduce using rule 42 (expression -> expression AND constant .)
    EQ_GREATER_THAN reduce using rule 42 (expression -> expression AND constant .)
    EQ_LESS_THAN    reduce using rule 42 (expression -> expression AND constant .)
    AND             reduce using rule 42 (expression -> expression AND constant .)
    OR              reduce using rule 42 (expression -> expression AND constant .)
    IF              reduce using rule 42 (expression -> expression AND constant .)
    ID              reduce using rule 42 (expression -> expression AND constant .)
    DEF             reduce using rule 42 (expression -> expression AND constant .)
    DEFP            reduce using rule 42 (expression -> expression AND constant .)
    DO              reduce using rule 42 (expression -> expression AND constant .)
    RETURN          reduce using rule 42 (expression -> expression AND constant .)
    CONST           reduce using rule 42 (expression -> expression AND constant .)
    MUT             reduce using rule 42 (expression -> expression AND constant .)
    NUMBER          reduce using rule 42 (expression -> expression AND constant .)
    STRING          reduce using rule 42 (expression -> expression AND constant .)
    (               reduce using rule 42 (expression -> expression AND constant .)
    END             reduce using rule 42 (expression -> expression AND constant .)
    ELSE_IF         reduce using rule 42 (expression -> expression AND constant .)
    ELSE            reduce using rule 42 (expression -> expression AND constant .)
    ,               reduce using rule 42 (expression -> expression AND constant .)


state 65

    (38) expression -> expression EQUAL constant .

    )               reduce using rule 38 (expression -> expression EQUAL constant .)
    +               reduce using rule 38 (expression -> expression EQUAL constant .)
    -               reduce using rule 38 (expression -> expression EQUAL constant .)
    *               reduce using rule 38 (expression -> expression EQUAL constant .)
    /               reduce using rule 38 (expression -> expression EQUAL constant .)
    ^               reduce using rule 38 (expression -> expression EQUAL constant .)
    %               reduce using rule 38 (expression -> expression EQUAL constant .)
    GREATER_THAN    reduce using rule 38 (expression -> expression EQUAL constant .)
    LESS_THAN       reduce using rule 38 (expression -> expression EQUAL constant .)
    EQUAL           reduce using rule 38 (expression -> expression EQUAL constant .)
    NOT_EQUAL       reduce using rule 38 (expression -> expression EQUAL constant .)
    EQ_GREATER_THAN reduce using rule 38 (expression -> expression EQUAL constant .)
    EQ_LESS_THAN    reduce using rule 38 (expression -> expression EQUAL constant .)
    AND             reduce using rule 38 (expression -> expression EQUAL constant .)
    OR              reduce using rule 38 (expression -> expression EQUAL constant .)
    IF              reduce using rule 38 (expression -> expression EQUAL constant .)
    ID              reduce using rule 38 (expression -> expression EQUAL constant .)
    DEF             reduce using rule 38 (expression -> expression EQUAL constant .)
    DEFP            reduce using rule 38 (expression -> expression EQUAL constant .)
    DO              reduce using rule 38 (expression -> expression EQUAL constant .)
    RETURN          reduce using rule 38 (expression -> expression EQUAL constant .)
    CONST           reduce using rule 38 (expression -> expression EQUAL constant .)
    MUT             reduce using rule 38 (expression -> expression EQUAL constant .)
    NUMBER          reduce using rule 38 (expression -> expression EQUAL constant .)
    STRING          reduce using rule 38 (expression -> expression EQUAL constant .)
    (               reduce using rule 38 (expression -> expression EQUAL constant .)
    END             reduce using rule 38 (expression -> expression EQUAL constant .)
    ELSE_IF         reduce using rule 38 (expression -> expression EQUAL constant .)
    ELSE            reduce using rule 38 (expression -> expression EQUAL constant .)
    ,               reduce using rule 38 (expression -> expression EQUAL constant .)


state 66

    (37) expression -> expression LESS_THAN constant .

    )               reduce using rule 37 (expression -> expression LESS_THAN constant .)
    +               reduce using rule 37 (expression -> expression LESS_THAN constant .)
    -               reduce using rule 37 (expression -> expression LESS_THAN constant .)
    *               reduce using rule 37 (expression -> expression LESS_THAN constant .)
    /               reduce using rule 37 (expression -> expression LESS_THAN constant .)
    ^               reduce using rule 37 (expression -> expression LESS_THAN constant .)
    %               reduce using rule 37 (expression -> expression LESS_THAN constant .)
    GREATER_THAN    reduce using rule 37 (expression -> expression LESS_THAN constant .)
    LESS_THAN       reduce using rule 37 (expression -> expression LESS_THAN constant .)
    EQUAL           reduce using rule 37 (expression -> expression LESS_THAN constant .)
    NOT_EQUAL       reduce using rule 37 (expression -> expression LESS_THAN constant .)
    EQ_GREATER_THAN reduce using rule 37 (expression -> expression LESS_THAN constant .)
    EQ_LESS_THAN    reduce using rule 37 (expression -> expression LESS_THAN constant .)
    AND             reduce using rule 37 (expression -> expression LESS_THAN constant .)
    OR              reduce using rule 37 (expression -> expression LESS_THAN constant .)
    IF              reduce using rule 37 (expression -> expression LESS_THAN constant .)
    ID              reduce using rule 37 (expression -> expression LESS_THAN constant .)
    DEF             reduce using rule 37 (expression -> expression LESS_THAN constant .)
    DEFP            reduce using rule 37 (expression -> expression LESS_THAN constant .)
    DO              reduce using rule 37 (expression -> expression LESS_THAN constant .)
    RETURN          reduce using rule 37 (expression -> expression LESS_THAN constant .)
    CONST           reduce using rule 37 (expression -> expression LESS_THAN constant .)
    MUT             reduce using rule 37 (expression -> expression LESS_THAN constant .)
    NUMBER          reduce using rule 37 (expression -> expression LESS_THAN constant .)
    STRING          reduce using rule 37 (expression -> expression LESS_THAN constant .)
    (               reduce using rule 37 (expression -> expression LESS_THAN constant .)
    END             reduce using rule 37 (expression -> expression LESS_THAN constant .)
    ELSE_IF         reduce using rule 37 (expression -> expression LESS_THAN constant .)
    ELSE            reduce using rule 37 (expression -> expression LESS_THAN constant .)
    ,               reduce using rule 37 (expression -> expression LESS_THAN constant .)


state 67

    (34) expression -> expression ^ constant .

    )               reduce using rule 34 (expression -> expression ^ constant .)
    +               reduce using rule 34 (expression -> expression ^ constant .)
    -               reduce using rule 34 (expression -> expression ^ constant .)
    *               reduce using rule 34 (expression -> expression ^ constant .)
    /               reduce using rule 34 (expression -> expression ^ constant .)
    ^               reduce using rule 34 (expression -> expression ^ constant .)
    %               reduce using rule 34 (expression -> expression ^ constant .)
    GREATER_THAN    reduce using rule 34 (expression -> expression ^ constant .)
    LESS_THAN       reduce using rule 34 (expression -> expression ^ constant .)
    EQUAL           reduce using rule 34 (expression -> expression ^ constant .)
    NOT_EQUAL       reduce using rule 34 (expression -> expression ^ constant .)
    EQ_GREATER_THAN reduce using rule 34 (expression -> expression ^ constant .)
    EQ_LESS_THAN    reduce using rule 34 (expression -> expression ^ constant .)
    AND             reduce using rule 34 (expression -> expression ^ constant .)
    OR              reduce using rule 34 (expression -> expression ^ constant .)
    IF              reduce using rule 34 (expression -> expression ^ constant .)
    ID              reduce using rule 34 (expression -> expression ^ constant .)
    DEF             reduce using rule 34 (expression -> expression ^ constant .)
    DEFP            reduce using rule 34 (expression -> expression ^ constant .)
    DO              reduce using rule 34 (expression -> expression ^ constant .)
    RETURN          reduce using rule 34 (expression -> expression ^ constant .)
    CONST           reduce using rule 34 (expression -> expression ^ constant .)
    MUT             reduce using rule 34 (expression -> expression ^ constant .)
    NUMBER          reduce using rule 34 (expression -> expression ^ constant .)
    STRING          reduce using rule 34 (expression -> expression ^ constant .)
    (               reduce using rule 34 (expression -> expression ^ constant .)
    END             reduce using rule 34 (expression -> expression ^ constant .)
    ELSE_IF         reduce using rule 34 (expression -> expression ^ constant .)
    ELSE            reduce using rule 34 (expression -> expression ^ constant .)
    ,               reduce using rule 34 (expression -> expression ^ constant .)


state 68

    (41) expression -> expression EQ_LESS_THAN constant .

    )               reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    +               reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    -               reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    *               reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    /               reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    ^               reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    %               reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    GREATER_THAN    reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    LESS_THAN       reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    EQUAL           reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    NOT_EQUAL       reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    EQ_GREATER_THAN reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    EQ_LESS_THAN    reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    AND             reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    OR              reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    IF              reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    ID              reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    DEF             reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    DEFP            reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    DO              reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    RETURN          reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    CONST           reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    MUT             reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    NUMBER          reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    STRING          reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    (               reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    END             reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    ELSE_IF         reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    ELSE            reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)
    ,               reduce using rule 41 (expression -> expression EQ_LESS_THAN constant .)


state 69

    (35) expression -> expression % constant .

    )               reduce using rule 35 (expression -> expression % constant .)
    +               reduce using rule 35 (expression -> expression % constant .)
    -               reduce using rule 35 (expression -> expression % constant .)
    *               reduce using rule 35 (expression -> expression % constant .)
    /               reduce using rule 35 (expression -> expression % constant .)
    ^               reduce using rule 35 (expression -> expression % constant .)
    %               reduce using rule 35 (expression -> expression % constant .)
    GREATER_THAN    reduce using rule 35 (expression -> expression % constant .)
    LESS_THAN       reduce using rule 35 (expression -> expression % constant .)
    EQUAL           reduce using rule 35 (expression -> expression % constant .)
    NOT_EQUAL       reduce using rule 35 (expression -> expression % constant .)
    EQ_GREATER_THAN reduce using rule 35 (expression -> expression % constant .)
    EQ_LESS_THAN    reduce using rule 35 (expression -> expression % constant .)
    AND             reduce using rule 35 (expression -> expression % constant .)
    OR              reduce using rule 35 (expression -> expression % constant .)
    IF              reduce using rule 35 (expression -> expression % constant .)
    ID              reduce using rule 35 (expression -> expression % constant .)
    DEF             reduce using rule 35 (expression -> expression % constant .)
    DEFP            reduce using rule 35 (expression -> expression % constant .)
    DO              reduce using rule 35 (expression -> expression % constant .)
    RETURN          reduce using rule 35 (expression -> expression % constant .)
    CONST           reduce using rule 35 (expression -> expression % constant .)
    MUT             reduce using rule 35 (expression -> expression % constant .)
    NUMBER          reduce using rule 35 (expression -> expression % constant .)
    STRING          reduce using rule 35 (expression -> expression % constant .)
    (               reduce using rule 35 (expression -> expression % constant .)
    END             reduce using rule 35 (expression -> expression % constant .)
    ELSE_IF         reduce using rule 35 (expression -> expression % constant .)
    ELSE            reduce using rule 35 (expression -> expression % constant .)
    ,               reduce using rule 35 (expression -> expression % constant .)


state 70

    (33) expression -> expression / constant .

    )               reduce using rule 33 (expression -> expression / constant .)
    +               reduce using rule 33 (expression -> expression / constant .)
    -               reduce using rule 33 (expression -> expression / constant .)
    *               reduce using rule 33 (expression -> expression / constant .)
    /               reduce using rule 33 (expression -> expression / constant .)
    ^               reduce using rule 33 (expression -> expression / constant .)
    %               reduce using rule 33 (expression -> expression / constant .)
    GREATER_THAN    reduce using rule 33 (expression -> expression / constant .)
    LESS_THAN       reduce using rule 33 (expression -> expression / constant .)
    EQUAL           reduce using rule 33 (expression -> expression / constant .)
    NOT_EQUAL       reduce using rule 33 (expression -> expression / constant .)
    EQ_GREATER_THAN reduce using rule 33 (expression -> expression / constant .)
    EQ_LESS_THAN    reduce using rule 33 (expression -> expression / constant .)
    AND             reduce using rule 33 (expression -> expression / constant .)
    OR              reduce using rule 33 (expression -> expression / constant .)
    IF              reduce using rule 33 (expression -> expression / constant .)
    ID              reduce using rule 33 (expression -> expression / constant .)
    DEF             reduce using rule 33 (expression -> expression / constant .)
    DEFP            reduce using rule 33 (expression -> expression / constant .)
    DO              reduce using rule 33 (expression -> expression / constant .)
    RETURN          reduce using rule 33 (expression -> expression / constant .)
    CONST           reduce using rule 33 (expression -> expression / constant .)
    MUT             reduce using rule 33 (expression -> expression / constant .)
    NUMBER          reduce using rule 33 (expression -> expression / constant .)
    STRING          reduce using rule 33 (expression -> expression / constant .)
    (               reduce using rule 33 (expression -> expression / constant .)
    END             reduce using rule 33 (expression -> expression / constant .)
    ELSE_IF         reduce using rule 33 (expression -> expression / constant .)
    ELSE            reduce using rule 33 (expression -> expression / constant .)
    ,               reduce using rule 33 (expression -> expression / constant .)


state 71

    (43) expression -> expression OR constant .

    )               reduce using rule 43 (expression -> expression OR constant .)
    +               reduce using rule 43 (expression -> expression OR constant .)
    -               reduce using rule 43 (expression -> expression OR constant .)
    *               reduce using rule 43 (expression -> expression OR constant .)
    /               reduce using rule 43 (expression -> expression OR constant .)
    ^               reduce using rule 43 (expression -> expression OR constant .)
    %               reduce using rule 43 (expression -> expression OR constant .)
    GREATER_THAN    reduce using rule 43 (expression -> expression OR constant .)
    LESS_THAN       reduce using rule 43 (expression -> expression OR constant .)
    EQUAL           reduce using rule 43 (expression -> expression OR constant .)
    NOT_EQUAL       reduce using rule 43 (expression -> expression OR constant .)
    EQ_GREATER_THAN reduce using rule 43 (expression -> expression OR constant .)
    EQ_LESS_THAN    reduce using rule 43 (expression -> expression OR constant .)
    AND             reduce using rule 43 (expression -> expression OR constant .)
    OR              reduce using rule 43 (expression -> expression OR constant .)
    IF              reduce using rule 43 (expression -> expression OR constant .)
    ID              reduce using rule 43 (expression -> expression OR constant .)
    DEF             reduce using rule 43 (expression -> expression OR constant .)
    DEFP            reduce using rule 43 (expression -> expression OR constant .)
    DO              reduce using rule 43 (expression -> expression OR constant .)
    RETURN          reduce using rule 43 (expression -> expression OR constant .)
    CONST           reduce using rule 43 (expression -> expression OR constant .)
    MUT             reduce using rule 43 (expression -> expression OR constant .)
    NUMBER          reduce using rule 43 (expression -> expression OR constant .)
    STRING          reduce using rule 43 (expression -> expression OR constant .)
    (               reduce using rule 43 (expression -> expression OR constant .)
    END             reduce using rule 43 (expression -> expression OR constant .)
    ELSE_IF         reduce using rule 43 (expression -> expression OR constant .)
    ELSE            reduce using rule 43 (expression -> expression OR constant .)
    ,               reduce using rule 43 (expression -> expression OR constant .)


state 72

    (48) constant -> ( expression ) .

    +               reduce using rule 48 (constant -> ( expression ) .)
    -               reduce using rule 48 (constant -> ( expression ) .)
    *               reduce using rule 48 (constant -> ( expression ) .)
    /               reduce using rule 48 (constant -> ( expression ) .)
    ^               reduce using rule 48 (constant -> ( expression ) .)
    %               reduce using rule 48 (constant -> ( expression ) .)
    GREATER_THAN    reduce using rule 48 (constant -> ( expression ) .)
    LESS_THAN       reduce using rule 48 (constant -> ( expression ) .)
    EQUAL           reduce using rule 48 (constant -> ( expression ) .)
    NOT_EQUAL       reduce using rule 48 (constant -> ( expression ) .)
    EQ_GREATER_THAN reduce using rule 48 (constant -> ( expression ) .)
    EQ_LESS_THAN    reduce using rule 48 (constant -> ( expression ) .)
    AND             reduce using rule 48 (constant -> ( expression ) .)
    OR              reduce using rule 48 (constant -> ( expression ) .)
    END             reduce using rule 48 (constant -> ( expression ) .)
    IF              reduce using rule 48 (constant -> ( expression ) .)
    ID              reduce using rule 48 (constant -> ( expression ) .)
    DEF             reduce using rule 48 (constant -> ( expression ) .)
    DEFP            reduce using rule 48 (constant -> ( expression ) .)
    DO              reduce using rule 48 (constant -> ( expression ) .)
    RETURN          reduce using rule 48 (constant -> ( expression ) .)
    CONST           reduce using rule 48 (constant -> ( expression ) .)
    MUT             reduce using rule 48 (constant -> ( expression ) .)
    NUMBER          reduce using rule 48 (constant -> ( expression ) .)
    STRING          reduce using rule 48 (constant -> ( expression ) .)
    (               reduce using rule 48 (constant -> ( expression ) .)
    )               reduce using rule 48 (constant -> ( expression ) .)
    ,               reduce using rule 48 (constant -> ( expression ) .)
    ELSE_IF         reduce using rule 48 (constant -> ( expression ) .)
    ELSE            reduce using rule 48 (constant -> ( expression ) .)


state 73

    (17) assignment -> ID = expression .
    (30) expression -> expression . + constant
    (31) expression -> expression . - constant
    (32) expression -> expression . * constant
    (33) expression -> expression . / constant
    (34) expression -> expression . ^ constant
    (35) expression -> expression . % constant
    (36) expression -> expression . GREATER_THAN constant
    (37) expression -> expression . LESS_THAN constant
    (38) expression -> expression . EQUAL constant
    (39) expression -> expression . NOT_EQUAL constant
    (40) expression -> expression . EQ_GREATER_THAN constant
    (41) expression -> expression . EQ_LESS_THAN constant
    (42) expression -> expression . AND constant
    (43) expression -> expression . OR constant

    )               reduce using rule 17 (assignment -> ID = expression .)
    ,               reduce using rule 17 (assignment -> ID = expression .)
    IF              reduce using rule 17 (assignment -> ID = expression .)
    ID              reduce using rule 17 (assignment -> ID = expression .)
    DEF             reduce using rule 17 (assignment -> ID = expression .)
    DEFP            reduce using rule 17 (assignment -> ID = expression .)
    DO              reduce using rule 17 (assignment -> ID = expression .)
    RETURN          reduce using rule 17 (assignment -> ID = expression .)
    CONST           reduce using rule 17 (assignment -> ID = expression .)
    MUT             reduce using rule 17 (assignment -> ID = expression .)
    NUMBER          reduce using rule 17 (assignment -> ID = expression .)
    STRING          reduce using rule 17 (assignment -> ID = expression .)
    (               reduce using rule 17 (assignment -> ID = expression .)
    END             reduce using rule 17 (assignment -> ID = expression .)
    ELSE_IF         reduce using rule 17 (assignment -> ID = expression .)
    ELSE            reduce using rule 17 (assignment -> ID = expression .)
    +               shift and go to state 40
    -               shift and go to state 38
    *               shift and go to state 35
    /               shift and go to state 47
    ^               shift and go to state 44
    %               shift and go to state 46
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 43
    EQUAL           shift and go to state 42
    NOT_EQUAL       shift and go to state 37
    EQ_GREATER_THAN shift and go to state 39
    EQ_LESS_THAN    shift and go to state 45
    AND             shift and go to state 41
    OR              shift and go to state 48


state 74

    (51) argument_list -> empty .

    )               reduce using rule 51 (argument_list -> empty .)
    ,               reduce using rule 51 (argument_list -> empty .)


state 75

    (52) argument_list -> argument .

    )               reduce using rule 52 (argument_list -> argument .)
    ,               reduce using rule 52 (argument_list -> argument .)


state 76

    (50) argument -> expression .
    (30) expression -> expression . + constant
    (31) expression -> expression . - constant
    (32) expression -> expression . * constant
    (33) expression -> expression . / constant
    (34) expression -> expression . ^ constant
    (35) expression -> expression . % constant
    (36) expression -> expression . GREATER_THAN constant
    (37) expression -> expression . LESS_THAN constant
    (38) expression -> expression . EQUAL constant
    (39) expression -> expression . NOT_EQUAL constant
    (40) expression -> expression . EQ_GREATER_THAN constant
    (41) expression -> expression . EQ_LESS_THAN constant
    (42) expression -> expression . AND constant
    (43) expression -> expression . OR constant

    )               reduce using rule 50 (argument -> expression .)
    ,               reduce using rule 50 (argument -> expression .)
    +               shift and go to state 40
    -               shift and go to state 38
    *               shift and go to state 35
    /               shift and go to state 47
    ^               shift and go to state 44
    %               shift and go to state 46
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 43
    EQUAL           shift and go to state 42
    NOT_EQUAL       shift and go to state 37
    EQ_GREATER_THAN shift and go to state 39
    EQ_LESS_THAN    shift and go to state 45
    AND             shift and go to state 41
    OR              shift and go to state 48


state 77

    (49) function_call -> ID ( argument_list . )
    (53) argument_list -> argument_list . , argument

    )               shift and go to state 87
    ,               shift and go to state 88


state 78

    (54) if_statement -> IF ( expression . ) DO statements else_blocks
    (30) expression -> expression . + constant
    (31) expression -> expression . - constant
    (32) expression -> expression . * constant
    (33) expression -> expression . / constant
    (34) expression -> expression . ^ constant
    (35) expression -> expression . % constant
    (36) expression -> expression . GREATER_THAN constant
    (37) expression -> expression . LESS_THAN constant
    (38) expression -> expression . EQUAL constant
    (39) expression -> expression . NOT_EQUAL constant
    (40) expression -> expression . EQ_GREATER_THAN constant
    (41) expression -> expression . EQ_LESS_THAN constant
    (42) expression -> expression . AND constant
    (43) expression -> expression . OR constant

    )               shift and go to state 89
    +               shift and go to state 40
    -               shift and go to state 38
    *               shift and go to state 35
    /               shift and go to state 47
    ^               shift and go to state 44
    %               shift and go to state 46
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 43
    EQUAL           shift and go to state 42
    NOT_EQUAL       shift and go to state 37
    EQ_GREATER_THAN shift and go to state 39
    EQ_LESS_THAN    shift and go to state 45
    AND             shift and go to state 41
    OR              shift and go to state 48


state 79

    (20) private_function_definition -> DEFP ID ( . def_argument_list ) do_block
    (24) def_argument_list -> . empty
    (25) def_argument_list -> . def_argument
    (26) def_argument_list -> . def_argument_list , def_argument
    (1) empty -> .
    (21) def_argument -> . ID
    (22) def_argument -> . assignment_qualifier ID
    (23) def_argument -> . assignment
    (15) assignment_qualifier -> . CONST
    (16) assignment_qualifier -> . MUT
    (17) assignment -> . ID = expression
    (18) assignment -> . assignment_qualifier ID = expression

    )               reduce using rule 1 (empty -> .)
    ,               reduce using rule 1 (empty -> .)
    ID              shift and go to state 83
    CONST           shift and go to state 9
    MUT             shift and go to state 10

    def_argument_list              shift and go to state 90
    assignment_qualifier           shift and go to state 85
    empty                          shift and go to state 81
    def_argument                   shift and go to state 82
    assignment                     shift and go to state 84

state 80

    (19) function_definition -> DEF ID ( def_argument_list . ) do_block
    (26) def_argument_list -> def_argument_list . , def_argument

    )               shift and go to state 91
    ,               shift and go to state 92


state 81

    (24) def_argument_list -> empty .

    )               reduce using rule 24 (def_argument_list -> empty .)
    ,               reduce using rule 24 (def_argument_list -> empty .)


state 82

    (25) def_argument_list -> def_argument .

    )               reduce using rule 25 (def_argument_list -> def_argument .)
    ,               reduce using rule 25 (def_argument_list -> def_argument .)


state 83

    (21) def_argument -> ID .
    (17) assignment -> ID . = expression

    )               reduce using rule 21 (def_argument -> ID .)
    ,               reduce using rule 21 (def_argument -> ID .)
    =               shift and go to state 51


state 84

    (23) def_argument -> assignment .

    )               reduce using rule 23 (def_argument -> assignment .)
    ,               reduce using rule 23 (def_argument -> assignment .)


state 85

    (22) def_argument -> assignment_qualifier . ID
    (18) assignment -> assignment_qualifier . ID = expression

    ID              shift and go to state 93


state 86

    (18) assignment -> assignment_qualifier ID = expression .
    (30) expression -> expression . + constant
    (31) expression -> expression . - constant
    (32) expression -> expression . * constant
    (33) expression -> expression . / constant
    (34) expression -> expression . ^ constant
    (35) expression -> expression . % constant
    (36) expression -> expression . GREATER_THAN constant
    (37) expression -> expression . LESS_THAN constant
    (38) expression -> expression . EQUAL constant
    (39) expression -> expression . NOT_EQUAL constant
    (40) expression -> expression . EQ_GREATER_THAN constant
    (41) expression -> expression . EQ_LESS_THAN constant
    (42) expression -> expression . AND constant
    (43) expression -> expression . OR constant

    )               reduce using rule 18 (assignment -> assignment_qualifier ID = expression .)
    ,               reduce using rule 18 (assignment -> assignment_qualifier ID = expression .)
    IF              reduce using rule 18 (assignment -> assignment_qualifier ID = expression .)
    ID              reduce using rule 18 (assignment -> assignment_qualifier ID = expression .)
    DEF             reduce using rule 18 (assignment -> assignment_qualifier ID = expression .)
    DEFP            reduce using rule 18 (assignment -> assignment_qualifier ID = expression .)
    DO              reduce using rule 18 (assignment -> assignment_qualifier ID = expression .)
    RETURN          reduce using rule 18 (assignment -> assignment_qualifier ID = expression .)
    CONST           reduce using rule 18 (assignment -> assignment_qualifier ID = expression .)
    MUT             reduce using rule 18 (assignment -> assignment_qualifier ID = expression .)
    NUMBER          reduce using rule 18 (assignment -> assignment_qualifier ID = expression .)
    STRING          reduce using rule 18 (assignment -> assignment_qualifier ID = expression .)
    (               reduce using rule 18 (assignment -> assignment_qualifier ID = expression .)
    END             reduce using rule 18 (assignment -> assignment_qualifier ID = expression .)
    ELSE_IF         reduce using rule 18 (assignment -> assignment_qualifier ID = expression .)
    ELSE            reduce using rule 18 (assignment -> assignment_qualifier ID = expression .)
    +               shift and go to state 40
    -               shift and go to state 38
    *               shift and go to state 35
    /               shift and go to state 47
    ^               shift and go to state 44
    %               shift and go to state 46
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 43
    EQUAL           shift and go to state 42
    NOT_EQUAL       shift and go to state 37
    EQ_GREATER_THAN shift and go to state 39
    EQ_LESS_THAN    shift and go to state 45
    AND             shift and go to state 41
    OR              shift and go to state 48


state 87

    (49) function_call -> ID ( argument_list ) .

    +               reduce using rule 49 (function_call -> ID ( argument_list ) .)
    -               reduce using rule 49 (function_call -> ID ( argument_list ) .)
    *               reduce using rule 49 (function_call -> ID ( argument_list ) .)
    /               reduce using rule 49 (function_call -> ID ( argument_list ) .)
    ^               reduce using rule 49 (function_call -> ID ( argument_list ) .)
    %               reduce using rule 49 (function_call -> ID ( argument_list ) .)
    GREATER_THAN    reduce using rule 49 (function_call -> ID ( argument_list ) .)
    LESS_THAN       reduce using rule 49 (function_call -> ID ( argument_list ) .)
    EQUAL           reduce using rule 49 (function_call -> ID ( argument_list ) .)
    NOT_EQUAL       reduce using rule 49 (function_call -> ID ( argument_list ) .)
    EQ_GREATER_THAN reduce using rule 49 (function_call -> ID ( argument_list ) .)
    EQ_LESS_THAN    reduce using rule 49 (function_call -> ID ( argument_list ) .)
    AND             reduce using rule 49 (function_call -> ID ( argument_list ) .)
    OR              reduce using rule 49 (function_call -> ID ( argument_list ) .)
    END             reduce using rule 49 (function_call -> ID ( argument_list ) .)
    IF              reduce using rule 49 (function_call -> ID ( argument_list ) .)
    ID              reduce using rule 49 (function_call -> ID ( argument_list ) .)
    DEF             reduce using rule 49 (function_call -> ID ( argument_list ) .)
    DEFP            reduce using rule 49 (function_call -> ID ( argument_list ) .)
    DO              reduce using rule 49 (function_call -> ID ( argument_list ) .)
    RETURN          reduce using rule 49 (function_call -> ID ( argument_list ) .)
    CONST           reduce using rule 49 (function_call -> ID ( argument_list ) .)
    MUT             reduce using rule 49 (function_call -> ID ( argument_list ) .)
    NUMBER          reduce using rule 49 (function_call -> ID ( argument_list ) .)
    STRING          reduce using rule 49 (function_call -> ID ( argument_list ) .)
    (               reduce using rule 49 (function_call -> ID ( argument_list ) .)
    ELSE_IF         reduce using rule 49 (function_call -> ID ( argument_list ) .)
    ELSE            reduce using rule 49 (function_call -> ID ( argument_list ) .)
    )               reduce using rule 49 (function_call -> ID ( argument_list ) .)
    ,               reduce using rule 49 (function_call -> ID ( argument_list ) .)


state 88

    (53) argument_list -> argument_list , . argument
    (50) argument -> . expression
    (29) expression -> . constant
    (30) expression -> . expression + constant
    (31) expression -> . expression - constant
    (32) expression -> . expression * constant
    (33) expression -> . expression / constant
    (34) expression -> . expression ^ constant
    (35) expression -> . expression % constant
    (36) expression -> . expression GREATER_THAN constant
    (37) expression -> . expression LESS_THAN constant
    (38) expression -> . expression EQUAL constant
    (39) expression -> . expression NOT_EQUAL constant
    (40) expression -> . expression EQ_GREATER_THAN constant
    (41) expression -> . expression EQ_LESS_THAN constant
    (42) expression -> . expression AND constant
    (43) expression -> . expression OR constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    argument                       shift and go to state 94
    function_call                  shift and go to state 19
    constant                       shift and go to state 15
    expression                     shift and go to state 76

state 89

    (54) if_statement -> IF ( expression ) . DO statements else_blocks

    DO              shift and go to state 95


state 90

    (20) private_function_definition -> DEFP ID ( def_argument_list . ) do_block
    (26) def_argument_list -> def_argument_list . , def_argument

    )               shift and go to state 96
    ,               shift and go to state 92


state 91

    (19) function_definition -> DEF ID ( def_argument_list ) . do_block
    (27) do_block -> . DO END
    (28) do_block -> . DO statements END

    DO              shift and go to state 7

    do_block                       shift and go to state 97

state 92

    (26) def_argument_list -> def_argument_list , . def_argument
    (21) def_argument -> . ID
    (22) def_argument -> . assignment_qualifier ID
    (23) def_argument -> . assignment
    (15) assignment_qualifier -> . CONST
    (16) assignment_qualifier -> . MUT
    (17) assignment -> . ID = expression
    (18) assignment -> . assignment_qualifier ID = expression

    ID              shift and go to state 83
    CONST           shift and go to state 9
    MUT             shift and go to state 10

    assignment_qualifier           shift and go to state 85
    assignment                     shift and go to state 84
    def_argument                   shift and go to state 98

state 93

    (22) def_argument -> assignment_qualifier ID .
    (18) assignment -> assignment_qualifier ID . = expression

    )               reduce using rule 22 (def_argument -> assignment_qualifier ID .)
    ,               reduce using rule 22 (def_argument -> assignment_qualifier ID .)
    =               shift and go to state 57


state 94

    (53) argument_list -> argument_list , argument .

    )               reduce using rule 53 (argument_list -> argument_list , argument .)
    ,               reduce using rule 53 (argument_list -> argument_list , argument .)


state 95

    (54) if_statement -> IF ( expression ) DO . statements else_blocks
    (5) statements -> . statement
    (6) statements -> . statements statement
    (7) statement -> . if_statement
    (8) statement -> . assignment
    (9) statement -> . function_definition
    (10) statement -> . private_function_definition
    (11) statement -> . do_block
    (12) statement -> . expression
    (13) statement -> . return_statement
    (54) if_statement -> . IF ( expression ) DO statements else_blocks
    (17) assignment -> . ID = expression
    (18) assignment -> . assignment_qualifier ID = expression
    (19) function_definition -> . DEF ID ( def_argument_list ) do_block
    (20) private_function_definition -> . DEFP ID ( def_argument_list ) do_block
    (27) do_block -> . DO END
    (28) do_block -> . DO statements END
    (29) expression -> . constant
    (30) expression -> . expression + constant
    (31) expression -> . expression - constant
    (32) expression -> . expression * constant
    (33) expression -> . expression / constant
    (34) expression -> . expression ^ constant
    (35) expression -> . expression % constant
    (36) expression -> . expression GREATER_THAN constant
    (37) expression -> . expression LESS_THAN constant
    (38) expression -> . expression EQUAL constant
    (39) expression -> . expression NOT_EQUAL constant
    (40) expression -> . expression EQ_GREATER_THAN constant
    (41) expression -> . expression EQ_LESS_THAN constant
    (42) expression -> . expression AND constant
    (43) expression -> . expression OR constant
    (14) return_statement -> . RETURN expression
    (15) assignment_qualifier -> . CONST
    (16) assignment_qualifier -> . MUT
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    IF              shift and go to state 24
    ID              shift and go to state 23
    DEF             shift and go to state 17
    DEFP            shift and go to state 26
    DO              shift and go to state 7
    RETURN          shift and go to state 28
    CONST           shift and go to state 9
    MUT             shift and go to state 10
    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    (               shift and go to state 21

    function_definition            shift and go to state 11
    do_block                       shift and go to state 22
    return_statement               shift and go to state 12
    constant                       shift and go to state 15
    statements                     shift and go to state 99
    statement                      shift and go to state 30
    function_call                  shift and go to state 19
    assignment_qualifier           shift and go to state 18
    assignment                     shift and go to state 27
    expression                     shift and go to state 20
    private_function_definition    shift and go to state 29
    if_statement                   shift and go to state 25

state 96

    (20) private_function_definition -> DEFP ID ( def_argument_list ) . do_block
    (27) do_block -> . DO END
    (28) do_block -> . DO statements END

    DO              shift and go to state 7

    do_block                       shift and go to state 100

state 97

    (19) function_definition -> DEF ID ( def_argument_list ) do_block .

    END             reduce using rule 19 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    ELSE_IF         reduce using rule 19 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    ELSE            reduce using rule 19 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    IF              reduce using rule 19 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    ID              reduce using rule 19 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    DEF             reduce using rule 19 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    DEFP            reduce using rule 19 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    DO              reduce using rule 19 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    RETURN          reduce using rule 19 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    CONST           reduce using rule 19 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    MUT             reduce using rule 19 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    NUMBER          reduce using rule 19 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    STRING          reduce using rule 19 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    (               reduce using rule 19 (function_definition -> DEF ID ( def_argument_list ) do_block .)


state 98

    (26) def_argument_list -> def_argument_list , def_argument .

    )               reduce using rule 26 (def_argument_list -> def_argument_list , def_argument .)
    ,               reduce using rule 26 (def_argument_list -> def_argument_list , def_argument .)


state 99

    (54) if_statement -> IF ( expression ) DO statements . else_blocks
    (6) statements -> statements . statement
    (55) else_blocks -> . else_if_block
    (56) else_blocks -> . else_block
    (57) else_blocks -> . END
    (7) statement -> . if_statement
    (8) statement -> . assignment
    (9) statement -> . function_definition
    (10) statement -> . private_function_definition
    (11) statement -> . do_block
    (12) statement -> . expression
    (13) statement -> . return_statement
    (59) else_if_block -> . ELSE_IF ( expression ) DO statements else_blocks
    (58) else_block -> . ELSE DO statements
    (54) if_statement -> . IF ( expression ) DO statements else_blocks
    (17) assignment -> . ID = expression
    (18) assignment -> . assignment_qualifier ID = expression
    (19) function_definition -> . DEF ID ( def_argument_list ) do_block
    (20) private_function_definition -> . DEFP ID ( def_argument_list ) do_block
    (27) do_block -> . DO END
    (28) do_block -> . DO statements END
    (29) expression -> . constant
    (30) expression -> . expression + constant
    (31) expression -> . expression - constant
    (32) expression -> . expression * constant
    (33) expression -> . expression / constant
    (34) expression -> . expression ^ constant
    (35) expression -> . expression % constant
    (36) expression -> . expression GREATER_THAN constant
    (37) expression -> . expression LESS_THAN constant
    (38) expression -> . expression EQUAL constant
    (39) expression -> . expression NOT_EQUAL constant
    (40) expression -> . expression EQ_GREATER_THAN constant
    (41) expression -> . expression EQ_LESS_THAN constant
    (42) expression -> . expression AND constant
    (43) expression -> . expression OR constant
    (14) return_statement -> . RETURN expression
    (15) assignment_qualifier -> . CONST
    (16) assignment_qualifier -> . MUT
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    END             shift and go to state 105
    ELSE_IF         shift and go to state 102
    ELSE            shift and go to state 106
    IF              shift and go to state 24
    ID              shift and go to state 23
    DEF             shift and go to state 17
    DEFP            shift and go to state 26
    DO              shift and go to state 7
    RETURN          shift and go to state 28
    CONST           shift and go to state 9
    MUT             shift and go to state 10
    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    (               shift and go to state 21

    function_definition            shift and go to state 11
    do_block                       shift and go to state 22
    else_if_block                  shift and go to state 103
    else_blocks                    shift and go to state 101
    return_statement               shift and go to state 12
    if_statement                   shift and go to state 25
    constant                       shift and go to state 15
    statement                      shift and go to state 32
    function_call                  shift and go to state 19
    assignment_qualifier           shift and go to state 18
    assignment                     shift and go to state 27
    expression                     shift and go to state 20
    private_function_definition    shift and go to state 29
    else_block                     shift and go to state 104

state 100

    (20) private_function_definition -> DEFP ID ( def_argument_list ) do_block .

    END             reduce using rule 20 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    ELSE_IF         reduce using rule 20 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    ELSE            reduce using rule 20 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    IF              reduce using rule 20 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    ID              reduce using rule 20 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    DEF             reduce using rule 20 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    DEFP            reduce using rule 20 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    DO              reduce using rule 20 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    RETURN          reduce using rule 20 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    CONST           reduce using rule 20 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    MUT             reduce using rule 20 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    NUMBER          reduce using rule 20 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    STRING          reduce using rule 20 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    (               reduce using rule 20 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)


state 101

    (54) if_statement -> IF ( expression ) DO statements else_blocks .

    END             reduce using rule 54 (if_statement -> IF ( expression ) DO statements else_blocks .)
    IF              reduce using rule 54 (if_statement -> IF ( expression ) DO statements else_blocks .)
    ID              reduce using rule 54 (if_statement -> IF ( expression ) DO statements else_blocks .)
    DEF             reduce using rule 54 (if_statement -> IF ( expression ) DO statements else_blocks .)
    DEFP            reduce using rule 54 (if_statement -> IF ( expression ) DO statements else_blocks .)
    DO              reduce using rule 54 (if_statement -> IF ( expression ) DO statements else_blocks .)
    RETURN          reduce using rule 54 (if_statement -> IF ( expression ) DO statements else_blocks .)
    CONST           reduce using rule 54 (if_statement -> IF ( expression ) DO statements else_blocks .)
    MUT             reduce using rule 54 (if_statement -> IF ( expression ) DO statements else_blocks .)
    NUMBER          reduce using rule 54 (if_statement -> IF ( expression ) DO statements else_blocks .)
    STRING          reduce using rule 54 (if_statement -> IF ( expression ) DO statements else_blocks .)
    (               reduce using rule 54 (if_statement -> IF ( expression ) DO statements else_blocks .)
    ELSE_IF         reduce using rule 54 (if_statement -> IF ( expression ) DO statements else_blocks .)
    ELSE            reduce using rule 54 (if_statement -> IF ( expression ) DO statements else_blocks .)


state 102

    (59) else_if_block -> ELSE_IF . ( expression ) DO statements else_blocks

    (               shift and go to state 107


state 103

    (55) else_blocks -> else_if_block .

    IF              reduce using rule 55 (else_blocks -> else_if_block .)
    ID              reduce using rule 55 (else_blocks -> else_if_block .)
    DEF             reduce using rule 55 (else_blocks -> else_if_block .)
    DEFP            reduce using rule 55 (else_blocks -> else_if_block .)
    DO              reduce using rule 55 (else_blocks -> else_if_block .)
    RETURN          reduce using rule 55 (else_blocks -> else_if_block .)
    CONST           reduce using rule 55 (else_blocks -> else_if_block .)
    MUT             reduce using rule 55 (else_blocks -> else_if_block .)
    NUMBER          reduce using rule 55 (else_blocks -> else_if_block .)
    STRING          reduce using rule 55 (else_blocks -> else_if_block .)
    (               reduce using rule 55 (else_blocks -> else_if_block .)
    END             reduce using rule 55 (else_blocks -> else_if_block .)
    ELSE_IF         reduce using rule 55 (else_blocks -> else_if_block .)
    ELSE            reduce using rule 55 (else_blocks -> else_if_block .)


state 104

    (56) else_blocks -> else_block .

    IF              reduce using rule 56 (else_blocks -> else_block .)
    ID              reduce using rule 56 (else_blocks -> else_block .)
    DEF             reduce using rule 56 (else_blocks -> else_block .)
    DEFP            reduce using rule 56 (else_blocks -> else_block .)
    DO              reduce using rule 56 (else_blocks -> else_block .)
    RETURN          reduce using rule 56 (else_blocks -> else_block .)
    CONST           reduce using rule 56 (else_blocks -> else_block .)
    MUT             reduce using rule 56 (else_blocks -> else_block .)
    NUMBER          reduce using rule 56 (else_blocks -> else_block .)
    STRING          reduce using rule 56 (else_blocks -> else_block .)
    (               reduce using rule 56 (else_blocks -> else_block .)
    END             reduce using rule 56 (else_blocks -> else_block .)
    ELSE_IF         reduce using rule 56 (else_blocks -> else_block .)
    ELSE            reduce using rule 56 (else_blocks -> else_block .)


state 105

    (57) else_blocks -> END .

    IF              reduce using rule 57 (else_blocks -> END .)
    ID              reduce using rule 57 (else_blocks -> END .)
    DEF             reduce using rule 57 (else_blocks -> END .)
    DEFP            reduce using rule 57 (else_blocks -> END .)
    DO              reduce using rule 57 (else_blocks -> END .)
    RETURN          reduce using rule 57 (else_blocks -> END .)
    CONST           reduce using rule 57 (else_blocks -> END .)
    MUT             reduce using rule 57 (else_blocks -> END .)
    NUMBER          reduce using rule 57 (else_blocks -> END .)
    STRING          reduce using rule 57 (else_blocks -> END .)
    (               reduce using rule 57 (else_blocks -> END .)
    END             reduce using rule 57 (else_blocks -> END .)
    ELSE_IF         reduce using rule 57 (else_blocks -> END .)
    ELSE            reduce using rule 57 (else_blocks -> END .)


state 106

    (58) else_block -> ELSE . DO statements

    DO              shift and go to state 108


state 107

    (59) else_if_block -> ELSE_IF ( . expression ) DO statements else_blocks
    (29) expression -> . constant
    (30) expression -> . expression + constant
    (31) expression -> . expression - constant
    (32) expression -> . expression * constant
    (33) expression -> . expression / constant
    (34) expression -> . expression ^ constant
    (35) expression -> . expression % constant
    (36) expression -> . expression GREATER_THAN constant
    (37) expression -> . expression LESS_THAN constant
    (38) expression -> . expression EQUAL constant
    (39) expression -> . expression NOT_EQUAL constant
    (40) expression -> . expression EQ_GREATER_THAN constant
    (41) expression -> . expression EQ_LESS_THAN constant
    (42) expression -> . expression AND constant
    (43) expression -> . expression OR constant
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 50
    (               shift and go to state 21

    constant                       shift and go to state 15
    function_call                  shift and go to state 19
    expression                     shift and go to state 109

state 108

    (58) else_block -> ELSE DO . statements
    (5) statements -> . statement
    (6) statements -> . statements statement
    (7) statement -> . if_statement
    (8) statement -> . assignment
    (9) statement -> . function_definition
    (10) statement -> . private_function_definition
    (11) statement -> . do_block
    (12) statement -> . expression
    (13) statement -> . return_statement
    (54) if_statement -> . IF ( expression ) DO statements else_blocks
    (17) assignment -> . ID = expression
    (18) assignment -> . assignment_qualifier ID = expression
    (19) function_definition -> . DEF ID ( def_argument_list ) do_block
    (20) private_function_definition -> . DEFP ID ( def_argument_list ) do_block
    (27) do_block -> . DO END
    (28) do_block -> . DO statements END
    (29) expression -> . constant
    (30) expression -> . expression + constant
    (31) expression -> . expression - constant
    (32) expression -> . expression * constant
    (33) expression -> . expression / constant
    (34) expression -> . expression ^ constant
    (35) expression -> . expression % constant
    (36) expression -> . expression GREATER_THAN constant
    (37) expression -> . expression LESS_THAN constant
    (38) expression -> . expression EQUAL constant
    (39) expression -> . expression NOT_EQUAL constant
    (40) expression -> . expression EQ_GREATER_THAN constant
    (41) expression -> . expression EQ_LESS_THAN constant
    (42) expression -> . expression AND constant
    (43) expression -> . expression OR constant
    (14) return_statement -> . RETURN expression
    (15) assignment_qualifier -> . CONST
    (16) assignment_qualifier -> . MUT
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    IF              shift and go to state 24
    ID              shift and go to state 23
    DEF             shift and go to state 17
    DEFP            shift and go to state 26
    DO              shift and go to state 7
    RETURN          shift and go to state 28
    CONST           shift and go to state 9
    MUT             shift and go to state 10
    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    (               shift and go to state 21

    function_definition            shift and go to state 11
    do_block                       shift and go to state 22
    return_statement               shift and go to state 12
    constant                       shift and go to state 15
    assignment                     shift and go to state 27
    statement                      shift and go to state 30
    function_call                  shift and go to state 19
    assignment_qualifier           shift and go to state 18
    statements                     shift and go to state 110
    expression                     shift and go to state 20
    private_function_definition    shift and go to state 29
    if_statement                   shift and go to state 25

state 109

    (59) else_if_block -> ELSE_IF ( expression . ) DO statements else_blocks
    (30) expression -> expression . + constant
    (31) expression -> expression . - constant
    (32) expression -> expression . * constant
    (33) expression -> expression . / constant
    (34) expression -> expression . ^ constant
    (35) expression -> expression . % constant
    (36) expression -> expression . GREATER_THAN constant
    (37) expression -> expression . LESS_THAN constant
    (38) expression -> expression . EQUAL constant
    (39) expression -> expression . NOT_EQUAL constant
    (40) expression -> expression . EQ_GREATER_THAN constant
    (41) expression -> expression . EQ_LESS_THAN constant
    (42) expression -> expression . AND constant
    (43) expression -> expression . OR constant

    )               shift and go to state 111
    +               shift and go to state 40
    -               shift and go to state 38
    *               shift and go to state 35
    /               shift and go to state 47
    ^               shift and go to state 44
    %               shift and go to state 46
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 43
    EQUAL           shift and go to state 42
    NOT_EQUAL       shift and go to state 37
    EQ_GREATER_THAN shift and go to state 39
    EQ_LESS_THAN    shift and go to state 45
    AND             shift and go to state 41
    OR              shift and go to state 48


state 110

    (58) else_block -> ELSE DO statements .
    (6) statements -> statements . statement
    (7) statement -> . if_statement
    (8) statement -> . assignment
    (9) statement -> . function_definition
    (10) statement -> . private_function_definition
    (11) statement -> . do_block
    (12) statement -> . expression
    (13) statement -> . return_statement
    (54) if_statement -> . IF ( expression ) DO statements else_blocks
    (17) assignment -> . ID = expression
    (18) assignment -> . assignment_qualifier ID = expression
    (19) function_definition -> . DEF ID ( def_argument_list ) do_block
    (20) private_function_definition -> . DEFP ID ( def_argument_list ) do_block
    (27) do_block -> . DO END
    (28) do_block -> . DO statements END
    (29) expression -> . constant
    (30) expression -> . expression + constant
    (31) expression -> . expression - constant
    (32) expression -> . expression * constant
    (33) expression -> . expression / constant
    (34) expression -> . expression ^ constant
    (35) expression -> . expression % constant
    (36) expression -> . expression GREATER_THAN constant
    (37) expression -> . expression LESS_THAN constant
    (38) expression -> . expression EQUAL constant
    (39) expression -> . expression NOT_EQUAL constant
    (40) expression -> . expression EQ_GREATER_THAN constant
    (41) expression -> . expression EQ_LESS_THAN constant
    (42) expression -> . expression AND constant
    (43) expression -> . expression OR constant
    (14) return_statement -> . RETURN expression
    (15) assignment_qualifier -> . CONST
    (16) assignment_qualifier -> . MUT
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    IF              reduce using rule 58 (else_block -> ELSE DO statements .)
    ID              reduce using rule 58 (else_block -> ELSE DO statements .)
    DEF             reduce using rule 58 (else_block -> ELSE DO statements .)
    DEFP            reduce using rule 58 (else_block -> ELSE DO statements .)
    RETURN          reduce using rule 58 (else_block -> ELSE DO statements .)
    CONST           reduce using rule 58 (else_block -> ELSE DO statements .)
    MUT             reduce using rule 58 (else_block -> ELSE DO statements .)
    NUMBER          reduce using rule 58 (else_block -> ELSE DO statements .)
    STRING          reduce using rule 58 (else_block -> ELSE DO statements .)
    (               reduce using rule 58 (else_block -> ELSE DO statements .)
    END             reduce using rule 58 (else_block -> ELSE DO statements .)
    ELSE_IF         reduce using rule 58 (else_block -> ELSE DO statements .)
    ELSE            reduce using rule 58 (else_block -> ELSE DO statements .)
    DO              shift and go to state 7

  ! DO              [ reduce using rule 58 (else_block -> ELSE DO statements .) ]
  ! IF              [ shift and go to state 24 ]
  ! ID              [ shift and go to state 23 ]
  ! DEF             [ shift and go to state 17 ]
  ! DEFP            [ shift and go to state 26 ]
  ! RETURN          [ shift and go to state 28 ]
  ! CONST           [ shift and go to state 9 ]
  ! MUT             [ shift and go to state 10 ]
  ! NUMBER          [ shift and go to state 13 ]
  ! STRING          [ shift and go to state 14 ]
  ! (               [ shift and go to state 21 ]

    function_definition            shift and go to state 11
    do_block                       shift and go to state 22
    return_statement               shift and go to state 12
    constant                       shift and go to state 15
    assignment                     shift and go to state 27
    statement                      shift and go to state 32
    function_call                  shift and go to state 19
    assignment_qualifier           shift and go to state 18
    expression                     shift and go to state 20
    private_function_definition    shift and go to state 29
    if_statement                   shift and go to state 25

state 111

    (59) else_if_block -> ELSE_IF ( expression ) . DO statements else_blocks

    DO              shift and go to state 112


state 112

    (59) else_if_block -> ELSE_IF ( expression ) DO . statements else_blocks
    (5) statements -> . statement
    (6) statements -> . statements statement
    (7) statement -> . if_statement
    (8) statement -> . assignment
    (9) statement -> . function_definition
    (10) statement -> . private_function_definition
    (11) statement -> . do_block
    (12) statement -> . expression
    (13) statement -> . return_statement
    (54) if_statement -> . IF ( expression ) DO statements else_blocks
    (17) assignment -> . ID = expression
    (18) assignment -> . assignment_qualifier ID = expression
    (19) function_definition -> . DEF ID ( def_argument_list ) do_block
    (20) private_function_definition -> . DEFP ID ( def_argument_list ) do_block
    (27) do_block -> . DO END
    (28) do_block -> . DO statements END
    (29) expression -> . constant
    (30) expression -> . expression + constant
    (31) expression -> . expression - constant
    (32) expression -> . expression * constant
    (33) expression -> . expression / constant
    (34) expression -> . expression ^ constant
    (35) expression -> . expression % constant
    (36) expression -> . expression GREATER_THAN constant
    (37) expression -> . expression LESS_THAN constant
    (38) expression -> . expression EQUAL constant
    (39) expression -> . expression NOT_EQUAL constant
    (40) expression -> . expression EQ_GREATER_THAN constant
    (41) expression -> . expression EQ_LESS_THAN constant
    (42) expression -> . expression AND constant
    (43) expression -> . expression OR constant
    (14) return_statement -> . RETURN expression
    (15) assignment_qualifier -> . CONST
    (16) assignment_qualifier -> . MUT
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    IF              shift and go to state 24
    ID              shift and go to state 23
    DEF             shift and go to state 17
    DEFP            shift and go to state 26
    DO              shift and go to state 7
    RETURN          shift and go to state 28
    CONST           shift and go to state 9
    MUT             shift and go to state 10
    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    (               shift and go to state 21

    function_definition            shift and go to state 11
    do_block                       shift and go to state 22
    return_statement               shift and go to state 12
    constant                       shift and go to state 15
    statements                     shift and go to state 113
    statement                      shift and go to state 30
    function_call                  shift and go to state 19
    assignment_qualifier           shift and go to state 18
    assignment                     shift and go to state 27
    expression                     shift and go to state 20
    private_function_definition    shift and go to state 29
    if_statement                   shift and go to state 25

state 113

    (59) else_if_block -> ELSE_IF ( expression ) DO statements . else_blocks
    (6) statements -> statements . statement
    (55) else_blocks -> . else_if_block
    (56) else_blocks -> . else_block
    (57) else_blocks -> . END
    (7) statement -> . if_statement
    (8) statement -> . assignment
    (9) statement -> . function_definition
    (10) statement -> . private_function_definition
    (11) statement -> . do_block
    (12) statement -> . expression
    (13) statement -> . return_statement
    (59) else_if_block -> . ELSE_IF ( expression ) DO statements else_blocks
    (58) else_block -> . ELSE DO statements
    (54) if_statement -> . IF ( expression ) DO statements else_blocks
    (17) assignment -> . ID = expression
    (18) assignment -> . assignment_qualifier ID = expression
    (19) function_definition -> . DEF ID ( def_argument_list ) do_block
    (20) private_function_definition -> . DEFP ID ( def_argument_list ) do_block
    (27) do_block -> . DO END
    (28) do_block -> . DO statements END
    (29) expression -> . constant
    (30) expression -> . expression + constant
    (31) expression -> . expression - constant
    (32) expression -> . expression * constant
    (33) expression -> . expression / constant
    (34) expression -> . expression ^ constant
    (35) expression -> . expression % constant
    (36) expression -> . expression GREATER_THAN constant
    (37) expression -> . expression LESS_THAN constant
    (38) expression -> . expression EQUAL constant
    (39) expression -> . expression NOT_EQUAL constant
    (40) expression -> . expression EQ_GREATER_THAN constant
    (41) expression -> . expression EQ_LESS_THAN constant
    (42) expression -> . expression AND constant
    (43) expression -> . expression OR constant
    (14) return_statement -> . RETURN expression
    (15) assignment_qualifier -> . CONST
    (16) assignment_qualifier -> . MUT
    (44) constant -> . NUMBER
    (45) constant -> . STRING
    (46) constant -> . function_call
    (47) constant -> . ID
    (48) constant -> . ( expression )
    (49) function_call -> . ID ( argument_list )

    END             shift and go to state 105
    ELSE_IF         shift and go to state 102
    ELSE            shift and go to state 106
    IF              shift and go to state 24
    ID              shift and go to state 23
    DEF             shift and go to state 17
    DEFP            shift and go to state 26
    DO              shift and go to state 7
    RETURN          shift and go to state 28
    CONST           shift and go to state 9
    MUT             shift and go to state 10
    NUMBER          shift and go to state 13
    STRING          shift and go to state 14
    (               shift and go to state 21

    function_definition            shift and go to state 11
    do_block                       shift and go to state 22
    else_if_block                  shift and go to state 103
    else_blocks                    shift and go to state 114
    return_statement               shift and go to state 12
    if_statement                   shift and go to state 25
    constant                       shift and go to state 15
    statement                      shift and go to state 32
    function_call                  shift and go to state 19
    assignment_qualifier           shift and go to state 18
    assignment                     shift and go to state 27
    expression                     shift and go to state 20
    private_function_definition    shift and go to state 29
    else_block                     shift and go to state 104

state 114

    (59) else_if_block -> ELSE_IF ( expression ) DO statements else_blocks .

    IF              reduce using rule 59 (else_if_block -> ELSE_IF ( expression ) DO statements else_blocks .)
    ID              reduce using rule 59 (else_if_block -> ELSE_IF ( expression ) DO statements else_blocks .)
    DEF             reduce using rule 59 (else_if_block -> ELSE_IF ( expression ) DO statements else_blocks .)
    DEFP            reduce using rule 59 (else_if_block -> ELSE_IF ( expression ) DO statements else_blocks .)
    DO              reduce using rule 59 (else_if_block -> ELSE_IF ( expression ) DO statements else_blocks .)
    RETURN          reduce using rule 59 (else_if_block -> ELSE_IF ( expression ) DO statements else_blocks .)
    CONST           reduce using rule 59 (else_if_block -> ELSE_IF ( expression ) DO statements else_blocks .)
    MUT             reduce using rule 59 (else_if_block -> ELSE_IF ( expression ) DO statements else_blocks .)
    NUMBER          reduce using rule 59 (else_if_block -> ELSE_IF ( expression ) DO statements else_blocks .)
    STRING          reduce using rule 59 (else_if_block -> ELSE_IF ( expression ) DO statements else_blocks .)
    (               reduce using rule 59 (else_if_block -> ELSE_IF ( expression ) DO statements else_blocks .)
    END             reduce using rule 59 (else_if_block -> ELSE_IF ( expression ) DO statements else_blocks .)
    ELSE_IF         reduce using rule 59 (else_if_block -> ELSE_IF ( expression ) DO statements else_blocks .)
    ELSE            reduce using rule 59 (else_if_block -> ELSE_IF ( expression ) DO statements else_blocks .)

