Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> modules
Rule 1     empty -> <empty>
Rule 2     modules -> module
Rule 3     modules -> modules module
Rule 4     module -> DEFMODULE ID do_block
Rule 5     statements -> statement
Rule 6     statements -> statements statement
Rule 7     statement -> assignment
Rule 8     statement -> function_definition
Rule 9     statement -> private_function_definition
Rule 10    statement -> do_block
Rule 11    statement -> expression
Rule 12    assignment_qualifier -> CONST
Rule 13    assignment_qualifier -> MUT
Rule 14    assignment -> ID = expression
Rule 15    assignment -> assignment_qualifier ID = expression
Rule 16    function_definition -> DEF ID ( def_argument_list ) do_block
Rule 17    private_function_definition -> DEFP ID ( def_argument_list ) do_block
Rule 18    def_argument -> ID
Rule 19    def_argument -> assignment_qualifier ID
Rule 20    def_argument -> assignment
Rule 21    def_argument_list -> empty
Rule 22    def_argument_list -> def_argument
Rule 23    def_argument_list -> def_argument_list , def_argument
Rule 24    do_block -> DO END
Rule 25    do_return -> RETURN
Rule 26    do_return -> 
Rule 27    do_block -> DO statements END
Rule 28    do_block -> DO statements do_return expression END
Rule 29    do_block -> DO do_return expression END
Rule 30    expression -> constant
Rule 31    expression -> expression + constant
Rule 32    expression -> expression - constant
Rule 33    expression -> expression * constant
Rule 34    expression -> expression / constant
Rule 35    expression -> expression ^ constant
Rule 36    expression -> expression % constant
Rule 37    constant -> NUMBER
Rule 38    constant -> STRING
Rule 39    constant -> function_call
Rule 40    constant -> ID
Rule 41    constant -> ( expression )
Rule 42    function_call -> ID ( argument_list )
Rule 43    argument -> expression
Rule 44    argument_list -> empty
Rule 45    argument_list -> argument
Rule 46    argument_list -> argument_list , argument

Terminals, with rules where they appear

                     : 26
%                    : 36
(                    : 16 17 41 42
)                    : 16 17 41 42
*                    : 33
+                    : 31
,                    : 23 46
-                    : 32
/                    : 34
=                    : 14 15
CONST                : 12
DEF                  : 16
DEFMODULE            : 4
DEFP                 : 17
DO                   : 24 27 28 29
END                  : 24 27 28 29
ID                   : 4 14 15 16 17 18 19 40 42
MUT                  : 13
NUMBER               : 37
RETURN               : 25
STRING               : 38
^                    : 35
error                : 

Nonterminals, with rules where they appear

argument             : 45 46
argument_list        : 42 46
assignment           : 7 20
assignment_qualifier : 15 19
constant             : 30 31 32 33 34 35 36
def_argument         : 22 23
def_argument_list    : 16 17 23
do_block             : 4 10 16 17
do_return            : 28 29
empty                : 21 44
expression           : 11 14 15 28 29 31 32 33 34 35 36 41 43
function_call        : 39
function_definition  : 8
module               : 2 3
modules              : 3 0
private_function_definition : 9
statement            : 5 6
statements           : 6 27 28

Parsing method: LALR

state 0

    (0) S' -> . modules
    (2) modules -> . module
    (3) modules -> . modules module
    (4) module -> . DEFMODULE ID do_block

    DEFMODULE       shift and go to state 1

    module                         shift and go to state 2
    modules                        shift and go to state 3

state 1

    (4) module -> DEFMODULE . ID do_block

    ID              shift and go to state 4


state 2

    (2) modules -> module .

    DEFMODULE       reduce using rule 2 (modules -> module .)
    $end            reduce using rule 2 (modules -> module .)


state 3

    (0) S' -> modules .
    (3) modules -> modules . module
    (4) module -> . DEFMODULE ID do_block

    DEFMODULE       shift and go to state 1

    module                         shift and go to state 5

state 4

    (4) module -> DEFMODULE ID . do_block
    (24) do_block -> . DO END
    (27) do_block -> . DO statements END
    (28) do_block -> . DO statements do_return expression END
    (29) do_block -> . DO do_return expression END

    DO              shift and go to state 6

    do_block                       shift and go to state 7

state 5

    (3) modules -> modules module .

    DEFMODULE       reduce using rule 3 (modules -> modules module .)
    $end            reduce using rule 3 (modules -> modules module .)


state 6

    (24) do_block -> DO . END
    (27) do_block -> DO . statements END
    (28) do_block -> DO . statements do_return expression END
    (29) do_block -> DO . do_return expression END
    (5) statements -> . statement
    (6) statements -> . statements statement
    (25) do_return -> . RETURN
    (26) do_return -> . 
    (7) statement -> . assignment
    (8) statement -> . function_definition
    (9) statement -> . private_function_definition
    (10) statement -> . do_block
    (11) statement -> . expression
    (14) assignment -> . ID = expression
    (15) assignment -> . assignment_qualifier ID = expression
    (16) function_definition -> . DEF ID ( def_argument_list ) do_block
    (17) private_function_definition -> . DEFP ID ( def_argument_list ) do_block
    (24) do_block -> . DO END
    (27) do_block -> . DO statements END
    (28) do_block -> . DO statements do_return expression END
    (29) do_block -> . DO do_return expression END
    (30) expression -> . constant
    (31) expression -> . expression + constant
    (32) expression -> . expression - constant
    (33) expression -> . expression * constant
    (34) expression -> . expression / constant
    (35) expression -> . expression ^ constant
    (36) expression -> . expression % constant
    (12) assignment_qualifier -> . CONST
    (13) assignment_qualifier -> . MUT
    (37) constant -> . NUMBER
    (38) constant -> . STRING
    (39) constant -> . function_call
    (40) constant -> . ID
    (41) constant -> . ( expression )
    (42) function_call -> . ID ( argument_list )

    END             shift and go to state 13
    RETURN          shift and go to state 16
                    shift and go to state 8
    ID              shift and go to state 14
    DEF             shift and go to state 11
    DEFP            shift and go to state 20
    DO              shift and go to state 6
    CONST           shift and go to state 9
    MUT             shift and go to state 18
    NUMBER          shift and go to state 28
    STRING          shift and go to state 12
    (               shift and go to state 22

    function_call                  shift and go to state 17
    private_function_definition    shift and go to state 19
    assignment_qualifier           shift and go to state 21
    constant                       shift and go to state 23
    function_definition            shift and go to state 24
    assignment                     shift and go to state 25
    statements                     shift and go to state 26
    do_return                      shift and go to state 27
    expression                     shift and go to state 15
    do_block                       shift and go to state 10
    statement                      shift and go to state 29

state 7

    (4) module -> DEFMODULE ID do_block .

    DEFMODULE       reduce using rule 4 (module -> DEFMODULE ID do_block .)
    $end            reduce using rule 4 (module -> DEFMODULE ID do_block .)


state 8

    (26) do_return ->  .

    NUMBER          reduce using rule 26 (do_return ->  .)
    STRING          reduce using rule 26 (do_return ->  .)
    ID              reduce using rule 26 (do_return ->  .)
    (               reduce using rule 26 (do_return ->  .)


state 9

    (12) assignment_qualifier -> CONST .

    ID              reduce using rule 12 (assignment_qualifier -> CONST .)


state 10

    (10) statement -> do_block .

    END             reduce using rule 10 (statement -> do_block .)
    RETURN          reduce using rule 10 (statement -> do_block .)
                    reduce using rule 10 (statement -> do_block .)
    ID              reduce using rule 10 (statement -> do_block .)
    DEF             reduce using rule 10 (statement -> do_block .)
    DEFP            reduce using rule 10 (statement -> do_block .)
    DO              reduce using rule 10 (statement -> do_block .)
    CONST           reduce using rule 10 (statement -> do_block .)
    MUT             reduce using rule 10 (statement -> do_block .)
    NUMBER          reduce using rule 10 (statement -> do_block .)
    STRING          reduce using rule 10 (statement -> do_block .)
    (               reduce using rule 10 (statement -> do_block .)


state 11

    (16) function_definition -> DEF . ID ( def_argument_list ) do_block

    ID              shift and go to state 30


state 12

    (38) constant -> STRING .

    END             reduce using rule 38 (constant -> STRING .)
    +               reduce using rule 38 (constant -> STRING .)
    -               reduce using rule 38 (constant -> STRING .)
    *               reduce using rule 38 (constant -> STRING .)
    /               reduce using rule 38 (constant -> STRING .)
    ^               reduce using rule 38 (constant -> STRING .)
    %               reduce using rule 38 (constant -> STRING .)
    )               reduce using rule 38 (constant -> STRING .)
    ,               reduce using rule 38 (constant -> STRING .)
    RETURN          reduce using rule 38 (constant -> STRING .)
                    reduce using rule 38 (constant -> STRING .)
    ID              reduce using rule 38 (constant -> STRING .)
    DEF             reduce using rule 38 (constant -> STRING .)
    DEFP            reduce using rule 38 (constant -> STRING .)
    DO              reduce using rule 38 (constant -> STRING .)
    CONST           reduce using rule 38 (constant -> STRING .)
    MUT             reduce using rule 38 (constant -> STRING .)
    NUMBER          reduce using rule 38 (constant -> STRING .)
    STRING          reduce using rule 38 (constant -> STRING .)
    (               reduce using rule 38 (constant -> STRING .)


state 13

    (24) do_block -> DO END .

    END             reduce using rule 24 (do_block -> DO END .)
    RETURN          reduce using rule 24 (do_block -> DO END .)
                    reduce using rule 24 (do_block -> DO END .)
    ID              reduce using rule 24 (do_block -> DO END .)
    DEF             reduce using rule 24 (do_block -> DO END .)
    DEFP            reduce using rule 24 (do_block -> DO END .)
    DO              reduce using rule 24 (do_block -> DO END .)
    CONST           reduce using rule 24 (do_block -> DO END .)
    MUT             reduce using rule 24 (do_block -> DO END .)
    NUMBER          reduce using rule 24 (do_block -> DO END .)
    STRING          reduce using rule 24 (do_block -> DO END .)
    (               reduce using rule 24 (do_block -> DO END .)
    DEFMODULE       reduce using rule 24 (do_block -> DO END .)
    $end            reduce using rule 24 (do_block -> DO END .)


state 14

    (14) assignment -> ID . = expression
    (40) constant -> ID .
    (42) function_call -> ID . ( argument_list )

  ! shift/reduce conflict for ( resolved as shift
    =               shift and go to state 32
    +               reduce using rule 40 (constant -> ID .)
    -               reduce using rule 40 (constant -> ID .)
    *               reduce using rule 40 (constant -> ID .)
    /               reduce using rule 40 (constant -> ID .)
    ^               reduce using rule 40 (constant -> ID .)
    %               reduce using rule 40 (constant -> ID .)
    END             reduce using rule 40 (constant -> ID .)
    RETURN          reduce using rule 40 (constant -> ID .)
                    reduce using rule 40 (constant -> ID .)
    ID              reduce using rule 40 (constant -> ID .)
    DEF             reduce using rule 40 (constant -> ID .)
    DEFP            reduce using rule 40 (constant -> ID .)
    DO              reduce using rule 40 (constant -> ID .)
    CONST           reduce using rule 40 (constant -> ID .)
    MUT             reduce using rule 40 (constant -> ID .)
    NUMBER          reduce using rule 40 (constant -> ID .)
    STRING          reduce using rule 40 (constant -> ID .)
    (               shift and go to state 31

  ! (               [ reduce using rule 40 (constant -> ID .) ]


state 15

    (11) statement -> expression .
    (31) expression -> expression . + constant
    (32) expression -> expression . - constant
    (33) expression -> expression . * constant
    (34) expression -> expression . / constant
    (35) expression -> expression . ^ constant
    (36) expression -> expression . % constant

    END             reduce using rule 11 (statement -> expression .)
    RETURN          reduce using rule 11 (statement -> expression .)
                    reduce using rule 11 (statement -> expression .)
    ID              reduce using rule 11 (statement -> expression .)
    DEF             reduce using rule 11 (statement -> expression .)
    DEFP            reduce using rule 11 (statement -> expression .)
    DO              reduce using rule 11 (statement -> expression .)
    CONST           reduce using rule 11 (statement -> expression .)
    MUT             reduce using rule 11 (statement -> expression .)
    NUMBER          reduce using rule 11 (statement -> expression .)
    STRING          reduce using rule 11 (statement -> expression .)
    (               reduce using rule 11 (statement -> expression .)
    +               shift and go to state 33
    -               shift and go to state 38
    *               shift and go to state 36
    /               shift and go to state 35
    ^               shift and go to state 37
    %               shift and go to state 34


state 16

    (25) do_return -> RETURN .

    NUMBER          reduce using rule 25 (do_return -> RETURN .)
    STRING          reduce using rule 25 (do_return -> RETURN .)
    ID              reduce using rule 25 (do_return -> RETURN .)
    (               reduce using rule 25 (do_return -> RETURN .)


state 17

    (39) constant -> function_call .

    END             reduce using rule 39 (constant -> function_call .)
    +               reduce using rule 39 (constant -> function_call .)
    -               reduce using rule 39 (constant -> function_call .)
    *               reduce using rule 39 (constant -> function_call .)
    /               reduce using rule 39 (constant -> function_call .)
    ^               reduce using rule 39 (constant -> function_call .)
    %               reduce using rule 39 (constant -> function_call .)
    )               reduce using rule 39 (constant -> function_call .)
    ,               reduce using rule 39 (constant -> function_call .)
    RETURN          reduce using rule 39 (constant -> function_call .)
                    reduce using rule 39 (constant -> function_call .)
    ID              reduce using rule 39 (constant -> function_call .)
    DEF             reduce using rule 39 (constant -> function_call .)
    DEFP            reduce using rule 39 (constant -> function_call .)
    DO              reduce using rule 39 (constant -> function_call .)
    CONST           reduce using rule 39 (constant -> function_call .)
    MUT             reduce using rule 39 (constant -> function_call .)
    NUMBER          reduce using rule 39 (constant -> function_call .)
    STRING          reduce using rule 39 (constant -> function_call .)
    (               reduce using rule 39 (constant -> function_call .)


state 18

    (13) assignment_qualifier -> MUT .

    ID              reduce using rule 13 (assignment_qualifier -> MUT .)


state 19

    (9) statement -> private_function_definition .

    END             reduce using rule 9 (statement -> private_function_definition .)
    RETURN          reduce using rule 9 (statement -> private_function_definition .)
                    reduce using rule 9 (statement -> private_function_definition .)
    ID              reduce using rule 9 (statement -> private_function_definition .)
    DEF             reduce using rule 9 (statement -> private_function_definition .)
    DEFP            reduce using rule 9 (statement -> private_function_definition .)
    DO              reduce using rule 9 (statement -> private_function_definition .)
    CONST           reduce using rule 9 (statement -> private_function_definition .)
    MUT             reduce using rule 9 (statement -> private_function_definition .)
    NUMBER          reduce using rule 9 (statement -> private_function_definition .)
    STRING          reduce using rule 9 (statement -> private_function_definition .)
    (               reduce using rule 9 (statement -> private_function_definition .)


state 20

    (17) private_function_definition -> DEFP . ID ( def_argument_list ) do_block

    ID              shift and go to state 39


state 21

    (15) assignment -> assignment_qualifier . ID = expression

    ID              shift and go to state 40


state 22

    (41) constant -> ( . expression )
    (30) expression -> . constant
    (31) expression -> . expression + constant
    (32) expression -> . expression - constant
    (33) expression -> . expression * constant
    (34) expression -> . expression / constant
    (35) expression -> . expression ^ constant
    (36) expression -> . expression % constant
    (37) constant -> . NUMBER
    (38) constant -> . STRING
    (39) constant -> . function_call
    (40) constant -> . ID
    (41) constant -> . ( expression )
    (42) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 28
    STRING          shift and go to state 12
    ID              shift and go to state 41
    (               shift and go to state 22

    expression                     shift and go to state 42
    function_call                  shift and go to state 17
    constant                       shift and go to state 23

state 23

    (30) expression -> constant .

    END             reduce using rule 30 (expression -> constant .)
    +               reduce using rule 30 (expression -> constant .)
    -               reduce using rule 30 (expression -> constant .)
    *               reduce using rule 30 (expression -> constant .)
    /               reduce using rule 30 (expression -> constant .)
    ^               reduce using rule 30 (expression -> constant .)
    %               reduce using rule 30 (expression -> constant .)
    )               reduce using rule 30 (expression -> constant .)
    ,               reduce using rule 30 (expression -> constant .)
    RETURN          reduce using rule 30 (expression -> constant .)
                    reduce using rule 30 (expression -> constant .)
    ID              reduce using rule 30 (expression -> constant .)
    DEF             reduce using rule 30 (expression -> constant .)
    DEFP            reduce using rule 30 (expression -> constant .)
    DO              reduce using rule 30 (expression -> constant .)
    CONST           reduce using rule 30 (expression -> constant .)
    MUT             reduce using rule 30 (expression -> constant .)
    NUMBER          reduce using rule 30 (expression -> constant .)
    STRING          reduce using rule 30 (expression -> constant .)
    (               reduce using rule 30 (expression -> constant .)


state 24

    (8) statement -> function_definition .

    END             reduce using rule 8 (statement -> function_definition .)
    RETURN          reduce using rule 8 (statement -> function_definition .)
                    reduce using rule 8 (statement -> function_definition .)
    ID              reduce using rule 8 (statement -> function_definition .)
    DEF             reduce using rule 8 (statement -> function_definition .)
    DEFP            reduce using rule 8 (statement -> function_definition .)
    DO              reduce using rule 8 (statement -> function_definition .)
    CONST           reduce using rule 8 (statement -> function_definition .)
    MUT             reduce using rule 8 (statement -> function_definition .)
    NUMBER          reduce using rule 8 (statement -> function_definition .)
    STRING          reduce using rule 8 (statement -> function_definition .)
    (               reduce using rule 8 (statement -> function_definition .)


state 25

    (7) statement -> assignment .

    END             reduce using rule 7 (statement -> assignment .)
    RETURN          reduce using rule 7 (statement -> assignment .)
                    reduce using rule 7 (statement -> assignment .)
    ID              reduce using rule 7 (statement -> assignment .)
    DEF             reduce using rule 7 (statement -> assignment .)
    DEFP            reduce using rule 7 (statement -> assignment .)
    DO              reduce using rule 7 (statement -> assignment .)
    CONST           reduce using rule 7 (statement -> assignment .)
    MUT             reduce using rule 7 (statement -> assignment .)
    NUMBER          reduce using rule 7 (statement -> assignment .)
    STRING          reduce using rule 7 (statement -> assignment .)
    (               reduce using rule 7 (statement -> assignment .)


state 26

    (27) do_block -> DO statements . END
    (28) do_block -> DO statements . do_return expression END
    (6) statements -> statements . statement
    (25) do_return -> . RETURN
    (26) do_return -> . 
    (7) statement -> . assignment
    (8) statement -> . function_definition
    (9) statement -> . private_function_definition
    (10) statement -> . do_block
    (11) statement -> . expression
    (14) assignment -> . ID = expression
    (15) assignment -> . assignment_qualifier ID = expression
    (16) function_definition -> . DEF ID ( def_argument_list ) do_block
    (17) private_function_definition -> . DEFP ID ( def_argument_list ) do_block
    (24) do_block -> . DO END
    (27) do_block -> . DO statements END
    (28) do_block -> . DO statements do_return expression END
    (29) do_block -> . DO do_return expression END
    (30) expression -> . constant
    (31) expression -> . expression + constant
    (32) expression -> . expression - constant
    (33) expression -> . expression * constant
    (34) expression -> . expression / constant
    (35) expression -> . expression ^ constant
    (36) expression -> . expression % constant
    (12) assignment_qualifier -> . CONST
    (13) assignment_qualifier -> . MUT
    (37) constant -> . NUMBER
    (38) constant -> . STRING
    (39) constant -> . function_call
    (40) constant -> . ID
    (41) constant -> . ( expression )
    (42) function_call -> . ID ( argument_list )

    END             shift and go to state 43
    RETURN          shift and go to state 16
                    shift and go to state 8
    ID              shift and go to state 14
    DEF             shift and go to state 11
    DEFP            shift and go to state 20
    DO              shift and go to state 6
    CONST           shift and go to state 9
    MUT             shift and go to state 18
    NUMBER          shift and go to state 28
    STRING          shift and go to state 12
    (               shift and go to state 22

    function_call                  shift and go to state 17
    private_function_definition    shift and go to state 19
    assignment_qualifier           shift and go to state 21
    constant                       shift and go to state 23
    function_definition            shift and go to state 24
    assignment                     shift and go to state 25
    do_return                      shift and go to state 44
    expression                     shift and go to state 15
    do_block                       shift and go to state 10
    statement                      shift and go to state 45

state 27

    (29) do_block -> DO do_return . expression END
    (30) expression -> . constant
    (31) expression -> . expression + constant
    (32) expression -> . expression - constant
    (33) expression -> . expression * constant
    (34) expression -> . expression / constant
    (35) expression -> . expression ^ constant
    (36) expression -> . expression % constant
    (37) constant -> . NUMBER
    (38) constant -> . STRING
    (39) constant -> . function_call
    (40) constant -> . ID
    (41) constant -> . ( expression )
    (42) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 28
    STRING          shift and go to state 12
    ID              shift and go to state 41
    (               shift and go to state 22

    expression                     shift and go to state 46
    function_call                  shift and go to state 17
    constant                       shift and go to state 23

state 28

    (37) constant -> NUMBER .

    END             reduce using rule 37 (constant -> NUMBER .)
    +               reduce using rule 37 (constant -> NUMBER .)
    -               reduce using rule 37 (constant -> NUMBER .)
    *               reduce using rule 37 (constant -> NUMBER .)
    /               reduce using rule 37 (constant -> NUMBER .)
    ^               reduce using rule 37 (constant -> NUMBER .)
    %               reduce using rule 37 (constant -> NUMBER .)
    )               reduce using rule 37 (constant -> NUMBER .)
    ,               reduce using rule 37 (constant -> NUMBER .)
    RETURN          reduce using rule 37 (constant -> NUMBER .)
                    reduce using rule 37 (constant -> NUMBER .)
    ID              reduce using rule 37 (constant -> NUMBER .)
    DEF             reduce using rule 37 (constant -> NUMBER .)
    DEFP            reduce using rule 37 (constant -> NUMBER .)
    DO              reduce using rule 37 (constant -> NUMBER .)
    CONST           reduce using rule 37 (constant -> NUMBER .)
    MUT             reduce using rule 37 (constant -> NUMBER .)
    NUMBER          reduce using rule 37 (constant -> NUMBER .)
    STRING          reduce using rule 37 (constant -> NUMBER .)
    (               reduce using rule 37 (constant -> NUMBER .)


state 29

    (5) statements -> statement .

    END             reduce using rule 5 (statements -> statement .)
    RETURN          reduce using rule 5 (statements -> statement .)
                    reduce using rule 5 (statements -> statement .)
    ID              reduce using rule 5 (statements -> statement .)
    DEF             reduce using rule 5 (statements -> statement .)
    DEFP            reduce using rule 5 (statements -> statement .)
    DO              reduce using rule 5 (statements -> statement .)
    CONST           reduce using rule 5 (statements -> statement .)
    MUT             reduce using rule 5 (statements -> statement .)
    NUMBER          reduce using rule 5 (statements -> statement .)
    STRING          reduce using rule 5 (statements -> statement .)
    (               reduce using rule 5 (statements -> statement .)


state 30

    (16) function_definition -> DEF ID . ( def_argument_list ) do_block

    (               shift and go to state 47


state 31

    (42) function_call -> ID ( . argument_list )
    (44) argument_list -> . empty
    (45) argument_list -> . argument
    (46) argument_list -> . argument_list , argument
    (1) empty -> .
    (43) argument -> . expression
    (30) expression -> . constant
    (31) expression -> . expression + constant
    (32) expression -> . expression - constant
    (33) expression -> . expression * constant
    (34) expression -> . expression / constant
    (35) expression -> . expression ^ constant
    (36) expression -> . expression % constant
    (37) constant -> . NUMBER
    (38) constant -> . STRING
    (39) constant -> . function_call
    (40) constant -> . ID
    (41) constant -> . ( expression )
    (42) function_call -> . ID ( argument_list )

    )               reduce using rule 1 (empty -> .)
    ,               reduce using rule 1 (empty -> .)
    NUMBER          shift and go to state 28
    STRING          shift and go to state 12
    ID              shift and go to state 41
    (               shift and go to state 22

    argument                       shift and go to state 51
    empty                          shift and go to state 49
    argument_list                  shift and go to state 48
    expression                     shift and go to state 50
    constant                       shift and go to state 23
    function_call                  shift and go to state 17

state 32

    (14) assignment -> ID = . expression
    (30) expression -> . constant
    (31) expression -> . expression + constant
    (32) expression -> . expression - constant
    (33) expression -> . expression * constant
    (34) expression -> . expression / constant
    (35) expression -> . expression ^ constant
    (36) expression -> . expression % constant
    (37) constant -> . NUMBER
    (38) constant -> . STRING
    (39) constant -> . function_call
    (40) constant -> . ID
    (41) constant -> . ( expression )
    (42) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 28
    STRING          shift and go to state 12
    ID              shift and go to state 41
    (               shift and go to state 22

    expression                     shift and go to state 52
    function_call                  shift and go to state 17
    constant                       shift and go to state 23

state 33

    (31) expression -> expression + . constant
    (37) constant -> . NUMBER
    (38) constant -> . STRING
    (39) constant -> . function_call
    (40) constant -> . ID
    (41) constant -> . ( expression )
    (42) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 28
    STRING          shift and go to state 12
    ID              shift and go to state 41
    (               shift and go to state 22

    function_call                  shift and go to state 17
    constant                       shift and go to state 53

state 34

    (36) expression -> expression % . constant
    (37) constant -> . NUMBER
    (38) constant -> . STRING
    (39) constant -> . function_call
    (40) constant -> . ID
    (41) constant -> . ( expression )
    (42) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 28
    STRING          shift and go to state 12
    ID              shift and go to state 41
    (               shift and go to state 22

    function_call                  shift and go to state 17
    constant                       shift and go to state 54

state 35

    (34) expression -> expression / . constant
    (37) constant -> . NUMBER
    (38) constant -> . STRING
    (39) constant -> . function_call
    (40) constant -> . ID
    (41) constant -> . ( expression )
    (42) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 28
    STRING          shift and go to state 12
    ID              shift and go to state 41
    (               shift and go to state 22

    function_call                  shift and go to state 17
    constant                       shift and go to state 55

state 36

    (33) expression -> expression * . constant
    (37) constant -> . NUMBER
    (38) constant -> . STRING
    (39) constant -> . function_call
    (40) constant -> . ID
    (41) constant -> . ( expression )
    (42) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 28
    STRING          shift and go to state 12
    ID              shift and go to state 41
    (               shift and go to state 22

    function_call                  shift and go to state 17
    constant                       shift and go to state 56

state 37

    (35) expression -> expression ^ . constant
    (37) constant -> . NUMBER
    (38) constant -> . STRING
    (39) constant -> . function_call
    (40) constant -> . ID
    (41) constant -> . ( expression )
    (42) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 28
    STRING          shift and go to state 12
    ID              shift and go to state 41
    (               shift and go to state 22

    function_call                  shift and go to state 17
    constant                       shift and go to state 57

state 38

    (32) expression -> expression - . constant
    (37) constant -> . NUMBER
    (38) constant -> . STRING
    (39) constant -> . function_call
    (40) constant -> . ID
    (41) constant -> . ( expression )
    (42) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 28
    STRING          shift and go to state 12
    ID              shift and go to state 41
    (               shift and go to state 22

    function_call                  shift and go to state 17
    constant                       shift and go to state 58

state 39

    (17) private_function_definition -> DEFP ID . ( def_argument_list ) do_block

    (               shift and go to state 59


state 40

    (15) assignment -> assignment_qualifier ID . = expression

    =               shift and go to state 60


state 41

    (40) constant -> ID .
    (42) function_call -> ID . ( argument_list )

  ! shift/reduce conflict for ( resolved as shift
    END             reduce using rule 40 (constant -> ID .)
    +               reduce using rule 40 (constant -> ID .)
    -               reduce using rule 40 (constant -> ID .)
    *               reduce using rule 40 (constant -> ID .)
    /               reduce using rule 40 (constant -> ID .)
    ^               reduce using rule 40 (constant -> ID .)
    %               reduce using rule 40 (constant -> ID .)
    )               reduce using rule 40 (constant -> ID .)
    ,               reduce using rule 40 (constant -> ID .)
    RETURN          reduce using rule 40 (constant -> ID .)
                    reduce using rule 40 (constant -> ID .)
    ID              reduce using rule 40 (constant -> ID .)
    DEF             reduce using rule 40 (constant -> ID .)
    DEFP            reduce using rule 40 (constant -> ID .)
    DO              reduce using rule 40 (constant -> ID .)
    CONST           reduce using rule 40 (constant -> ID .)
    MUT             reduce using rule 40 (constant -> ID .)
    NUMBER          reduce using rule 40 (constant -> ID .)
    STRING          reduce using rule 40 (constant -> ID .)
    (               shift and go to state 31

  ! (               [ reduce using rule 40 (constant -> ID .) ]


state 42

    (41) constant -> ( expression . )
    (31) expression -> expression . + constant
    (32) expression -> expression . - constant
    (33) expression -> expression . * constant
    (34) expression -> expression . / constant
    (35) expression -> expression . ^ constant
    (36) expression -> expression . % constant

    )               shift and go to state 61
    +               shift and go to state 33
    -               shift and go to state 38
    *               shift and go to state 36
    /               shift and go to state 35
    ^               shift and go to state 37
    %               shift and go to state 34


state 43

    (27) do_block -> DO statements END .

    END             reduce using rule 27 (do_block -> DO statements END .)
    RETURN          reduce using rule 27 (do_block -> DO statements END .)
                    reduce using rule 27 (do_block -> DO statements END .)
    ID              reduce using rule 27 (do_block -> DO statements END .)
    DEF             reduce using rule 27 (do_block -> DO statements END .)
    DEFP            reduce using rule 27 (do_block -> DO statements END .)
    DO              reduce using rule 27 (do_block -> DO statements END .)
    CONST           reduce using rule 27 (do_block -> DO statements END .)
    MUT             reduce using rule 27 (do_block -> DO statements END .)
    NUMBER          reduce using rule 27 (do_block -> DO statements END .)
    STRING          reduce using rule 27 (do_block -> DO statements END .)
    (               reduce using rule 27 (do_block -> DO statements END .)
    DEFMODULE       reduce using rule 27 (do_block -> DO statements END .)
    $end            reduce using rule 27 (do_block -> DO statements END .)


state 44

    (28) do_block -> DO statements do_return . expression END
    (30) expression -> . constant
    (31) expression -> . expression + constant
    (32) expression -> . expression - constant
    (33) expression -> . expression * constant
    (34) expression -> . expression / constant
    (35) expression -> . expression ^ constant
    (36) expression -> . expression % constant
    (37) constant -> . NUMBER
    (38) constant -> . STRING
    (39) constant -> . function_call
    (40) constant -> . ID
    (41) constant -> . ( expression )
    (42) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 28
    STRING          shift and go to state 12
    ID              shift and go to state 41
    (               shift and go to state 22

    function_call                  shift and go to state 17
    expression                     shift and go to state 62
    constant                       shift and go to state 23

state 45

    (6) statements -> statements statement .

    END             reduce using rule 6 (statements -> statements statement .)
    RETURN          reduce using rule 6 (statements -> statements statement .)
                    reduce using rule 6 (statements -> statements statement .)
    ID              reduce using rule 6 (statements -> statements statement .)
    DEF             reduce using rule 6 (statements -> statements statement .)
    DEFP            reduce using rule 6 (statements -> statements statement .)
    DO              reduce using rule 6 (statements -> statements statement .)
    CONST           reduce using rule 6 (statements -> statements statement .)
    MUT             reduce using rule 6 (statements -> statements statement .)
    NUMBER          reduce using rule 6 (statements -> statements statement .)
    STRING          reduce using rule 6 (statements -> statements statement .)
    (               reduce using rule 6 (statements -> statements statement .)


state 46

    (29) do_block -> DO do_return expression . END
    (31) expression -> expression . + constant
    (32) expression -> expression . - constant
    (33) expression -> expression . * constant
    (34) expression -> expression . / constant
    (35) expression -> expression . ^ constant
    (36) expression -> expression . % constant

    END             shift and go to state 63
    +               shift and go to state 33
    -               shift and go to state 38
    *               shift and go to state 36
    /               shift and go to state 35
    ^               shift and go to state 37
    %               shift and go to state 34


state 47

    (16) function_definition -> DEF ID ( . def_argument_list ) do_block
    (21) def_argument_list -> . empty
    (22) def_argument_list -> . def_argument
    (23) def_argument_list -> . def_argument_list , def_argument
    (1) empty -> .
    (18) def_argument -> . ID
    (19) def_argument -> . assignment_qualifier ID
    (20) def_argument -> . assignment
    (12) assignment_qualifier -> . CONST
    (13) assignment_qualifier -> . MUT
    (14) assignment -> . ID = expression
    (15) assignment -> . assignment_qualifier ID = expression

    )               reduce using rule 1 (empty -> .)
    ,               reduce using rule 1 (empty -> .)
    ID              shift and go to state 66
    CONST           shift and go to state 9
    MUT             shift and go to state 18

    assignment_qualifier           shift and go to state 65
    def_argument                   shift and go to state 64
    assignment                     shift and go to state 67
    def_argument_list              shift and go to state 68
    empty                          shift and go to state 69

state 48

    (42) function_call -> ID ( argument_list . )
    (46) argument_list -> argument_list . , argument

    )               shift and go to state 71
    ,               shift and go to state 70


state 49

    (44) argument_list -> empty .

    )               reduce using rule 44 (argument_list -> empty .)
    ,               reduce using rule 44 (argument_list -> empty .)


state 50

    (43) argument -> expression .
    (31) expression -> expression . + constant
    (32) expression -> expression . - constant
    (33) expression -> expression . * constant
    (34) expression -> expression . / constant
    (35) expression -> expression . ^ constant
    (36) expression -> expression . % constant

    )               reduce using rule 43 (argument -> expression .)
    ,               reduce using rule 43 (argument -> expression .)
    +               shift and go to state 33
    -               shift and go to state 38
    *               shift and go to state 36
    /               shift and go to state 35
    ^               shift and go to state 37
    %               shift and go to state 34


state 51

    (45) argument_list -> argument .

    )               reduce using rule 45 (argument_list -> argument .)
    ,               reduce using rule 45 (argument_list -> argument .)


state 52

    (14) assignment -> ID = expression .
    (31) expression -> expression . + constant
    (32) expression -> expression . - constant
    (33) expression -> expression . * constant
    (34) expression -> expression . / constant
    (35) expression -> expression . ^ constant
    (36) expression -> expression . % constant

    )               reduce using rule 14 (assignment -> ID = expression .)
    ,               reduce using rule 14 (assignment -> ID = expression .)
    END             reduce using rule 14 (assignment -> ID = expression .)
    RETURN          reduce using rule 14 (assignment -> ID = expression .)
                    reduce using rule 14 (assignment -> ID = expression .)
    ID              reduce using rule 14 (assignment -> ID = expression .)
    DEF             reduce using rule 14 (assignment -> ID = expression .)
    DEFP            reduce using rule 14 (assignment -> ID = expression .)
    DO              reduce using rule 14 (assignment -> ID = expression .)
    CONST           reduce using rule 14 (assignment -> ID = expression .)
    MUT             reduce using rule 14 (assignment -> ID = expression .)
    NUMBER          reduce using rule 14 (assignment -> ID = expression .)
    STRING          reduce using rule 14 (assignment -> ID = expression .)
    (               reduce using rule 14 (assignment -> ID = expression .)
    +               shift and go to state 33
    -               shift and go to state 38
    *               shift and go to state 36
    /               shift and go to state 35
    ^               shift and go to state 37
    %               shift and go to state 34


state 53

    (31) expression -> expression + constant .

    END             reduce using rule 31 (expression -> expression + constant .)
    +               reduce using rule 31 (expression -> expression + constant .)
    -               reduce using rule 31 (expression -> expression + constant .)
    *               reduce using rule 31 (expression -> expression + constant .)
    /               reduce using rule 31 (expression -> expression + constant .)
    ^               reduce using rule 31 (expression -> expression + constant .)
    %               reduce using rule 31 (expression -> expression + constant .)
    )               reduce using rule 31 (expression -> expression + constant .)
    ,               reduce using rule 31 (expression -> expression + constant .)
    RETURN          reduce using rule 31 (expression -> expression + constant .)
                    reduce using rule 31 (expression -> expression + constant .)
    ID              reduce using rule 31 (expression -> expression + constant .)
    DEF             reduce using rule 31 (expression -> expression + constant .)
    DEFP            reduce using rule 31 (expression -> expression + constant .)
    DO              reduce using rule 31 (expression -> expression + constant .)
    CONST           reduce using rule 31 (expression -> expression + constant .)
    MUT             reduce using rule 31 (expression -> expression + constant .)
    NUMBER          reduce using rule 31 (expression -> expression + constant .)
    STRING          reduce using rule 31 (expression -> expression + constant .)
    (               reduce using rule 31 (expression -> expression + constant .)


state 54

    (36) expression -> expression % constant .

    END             reduce using rule 36 (expression -> expression % constant .)
    +               reduce using rule 36 (expression -> expression % constant .)
    -               reduce using rule 36 (expression -> expression % constant .)
    *               reduce using rule 36 (expression -> expression % constant .)
    /               reduce using rule 36 (expression -> expression % constant .)
    ^               reduce using rule 36 (expression -> expression % constant .)
    %               reduce using rule 36 (expression -> expression % constant .)
    )               reduce using rule 36 (expression -> expression % constant .)
    ,               reduce using rule 36 (expression -> expression % constant .)
    RETURN          reduce using rule 36 (expression -> expression % constant .)
                    reduce using rule 36 (expression -> expression % constant .)
    ID              reduce using rule 36 (expression -> expression % constant .)
    DEF             reduce using rule 36 (expression -> expression % constant .)
    DEFP            reduce using rule 36 (expression -> expression % constant .)
    DO              reduce using rule 36 (expression -> expression % constant .)
    CONST           reduce using rule 36 (expression -> expression % constant .)
    MUT             reduce using rule 36 (expression -> expression % constant .)
    NUMBER          reduce using rule 36 (expression -> expression % constant .)
    STRING          reduce using rule 36 (expression -> expression % constant .)
    (               reduce using rule 36 (expression -> expression % constant .)


state 55

    (34) expression -> expression / constant .

    END             reduce using rule 34 (expression -> expression / constant .)
    +               reduce using rule 34 (expression -> expression / constant .)
    -               reduce using rule 34 (expression -> expression / constant .)
    *               reduce using rule 34 (expression -> expression / constant .)
    /               reduce using rule 34 (expression -> expression / constant .)
    ^               reduce using rule 34 (expression -> expression / constant .)
    %               reduce using rule 34 (expression -> expression / constant .)
    )               reduce using rule 34 (expression -> expression / constant .)
    ,               reduce using rule 34 (expression -> expression / constant .)
    RETURN          reduce using rule 34 (expression -> expression / constant .)
                    reduce using rule 34 (expression -> expression / constant .)
    ID              reduce using rule 34 (expression -> expression / constant .)
    DEF             reduce using rule 34 (expression -> expression / constant .)
    DEFP            reduce using rule 34 (expression -> expression / constant .)
    DO              reduce using rule 34 (expression -> expression / constant .)
    CONST           reduce using rule 34 (expression -> expression / constant .)
    MUT             reduce using rule 34 (expression -> expression / constant .)
    NUMBER          reduce using rule 34 (expression -> expression / constant .)
    STRING          reduce using rule 34 (expression -> expression / constant .)
    (               reduce using rule 34 (expression -> expression / constant .)


state 56

    (33) expression -> expression * constant .

    END             reduce using rule 33 (expression -> expression * constant .)
    +               reduce using rule 33 (expression -> expression * constant .)
    -               reduce using rule 33 (expression -> expression * constant .)
    *               reduce using rule 33 (expression -> expression * constant .)
    /               reduce using rule 33 (expression -> expression * constant .)
    ^               reduce using rule 33 (expression -> expression * constant .)
    %               reduce using rule 33 (expression -> expression * constant .)
    )               reduce using rule 33 (expression -> expression * constant .)
    ,               reduce using rule 33 (expression -> expression * constant .)
    RETURN          reduce using rule 33 (expression -> expression * constant .)
                    reduce using rule 33 (expression -> expression * constant .)
    ID              reduce using rule 33 (expression -> expression * constant .)
    DEF             reduce using rule 33 (expression -> expression * constant .)
    DEFP            reduce using rule 33 (expression -> expression * constant .)
    DO              reduce using rule 33 (expression -> expression * constant .)
    CONST           reduce using rule 33 (expression -> expression * constant .)
    MUT             reduce using rule 33 (expression -> expression * constant .)
    NUMBER          reduce using rule 33 (expression -> expression * constant .)
    STRING          reduce using rule 33 (expression -> expression * constant .)
    (               reduce using rule 33 (expression -> expression * constant .)


state 57

    (35) expression -> expression ^ constant .

    END             reduce using rule 35 (expression -> expression ^ constant .)
    +               reduce using rule 35 (expression -> expression ^ constant .)
    -               reduce using rule 35 (expression -> expression ^ constant .)
    *               reduce using rule 35 (expression -> expression ^ constant .)
    /               reduce using rule 35 (expression -> expression ^ constant .)
    ^               reduce using rule 35 (expression -> expression ^ constant .)
    %               reduce using rule 35 (expression -> expression ^ constant .)
    )               reduce using rule 35 (expression -> expression ^ constant .)
    ,               reduce using rule 35 (expression -> expression ^ constant .)
    RETURN          reduce using rule 35 (expression -> expression ^ constant .)
                    reduce using rule 35 (expression -> expression ^ constant .)
    ID              reduce using rule 35 (expression -> expression ^ constant .)
    DEF             reduce using rule 35 (expression -> expression ^ constant .)
    DEFP            reduce using rule 35 (expression -> expression ^ constant .)
    DO              reduce using rule 35 (expression -> expression ^ constant .)
    CONST           reduce using rule 35 (expression -> expression ^ constant .)
    MUT             reduce using rule 35 (expression -> expression ^ constant .)
    NUMBER          reduce using rule 35 (expression -> expression ^ constant .)
    STRING          reduce using rule 35 (expression -> expression ^ constant .)
    (               reduce using rule 35 (expression -> expression ^ constant .)


state 58

    (32) expression -> expression - constant .

    END             reduce using rule 32 (expression -> expression - constant .)
    +               reduce using rule 32 (expression -> expression - constant .)
    -               reduce using rule 32 (expression -> expression - constant .)
    *               reduce using rule 32 (expression -> expression - constant .)
    /               reduce using rule 32 (expression -> expression - constant .)
    ^               reduce using rule 32 (expression -> expression - constant .)
    %               reduce using rule 32 (expression -> expression - constant .)
    )               reduce using rule 32 (expression -> expression - constant .)
    ,               reduce using rule 32 (expression -> expression - constant .)
    RETURN          reduce using rule 32 (expression -> expression - constant .)
                    reduce using rule 32 (expression -> expression - constant .)
    ID              reduce using rule 32 (expression -> expression - constant .)
    DEF             reduce using rule 32 (expression -> expression - constant .)
    DEFP            reduce using rule 32 (expression -> expression - constant .)
    DO              reduce using rule 32 (expression -> expression - constant .)
    CONST           reduce using rule 32 (expression -> expression - constant .)
    MUT             reduce using rule 32 (expression -> expression - constant .)
    NUMBER          reduce using rule 32 (expression -> expression - constant .)
    STRING          reduce using rule 32 (expression -> expression - constant .)
    (               reduce using rule 32 (expression -> expression - constant .)


state 59

    (17) private_function_definition -> DEFP ID ( . def_argument_list ) do_block
    (21) def_argument_list -> . empty
    (22) def_argument_list -> . def_argument
    (23) def_argument_list -> . def_argument_list , def_argument
    (1) empty -> .
    (18) def_argument -> . ID
    (19) def_argument -> . assignment_qualifier ID
    (20) def_argument -> . assignment
    (12) assignment_qualifier -> . CONST
    (13) assignment_qualifier -> . MUT
    (14) assignment -> . ID = expression
    (15) assignment -> . assignment_qualifier ID = expression

    )               reduce using rule 1 (empty -> .)
    ,               reduce using rule 1 (empty -> .)
    ID              shift and go to state 66
    CONST           shift and go to state 9
    MUT             shift and go to state 18

    assignment_qualifier           shift and go to state 65
    def_argument                   shift and go to state 64
    assignment                     shift and go to state 67
    def_argument_list              shift and go to state 72
    empty                          shift and go to state 69

state 60

    (15) assignment -> assignment_qualifier ID = . expression
    (30) expression -> . constant
    (31) expression -> . expression + constant
    (32) expression -> . expression - constant
    (33) expression -> . expression * constant
    (34) expression -> . expression / constant
    (35) expression -> . expression ^ constant
    (36) expression -> . expression % constant
    (37) constant -> . NUMBER
    (38) constant -> . STRING
    (39) constant -> . function_call
    (40) constant -> . ID
    (41) constant -> . ( expression )
    (42) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 28
    STRING          shift and go to state 12
    ID              shift and go to state 41
    (               shift and go to state 22

    expression                     shift and go to state 73
    function_call                  shift and go to state 17
    constant                       shift and go to state 23

state 61

    (41) constant -> ( expression ) .

    END             reduce using rule 41 (constant -> ( expression ) .)
    +               reduce using rule 41 (constant -> ( expression ) .)
    -               reduce using rule 41 (constant -> ( expression ) .)
    *               reduce using rule 41 (constant -> ( expression ) .)
    /               reduce using rule 41 (constant -> ( expression ) .)
    ^               reduce using rule 41 (constant -> ( expression ) .)
    %               reduce using rule 41 (constant -> ( expression ) .)
    )               reduce using rule 41 (constant -> ( expression ) .)
    ,               reduce using rule 41 (constant -> ( expression ) .)
    RETURN          reduce using rule 41 (constant -> ( expression ) .)
                    reduce using rule 41 (constant -> ( expression ) .)
    ID              reduce using rule 41 (constant -> ( expression ) .)
    DEF             reduce using rule 41 (constant -> ( expression ) .)
    DEFP            reduce using rule 41 (constant -> ( expression ) .)
    DO              reduce using rule 41 (constant -> ( expression ) .)
    CONST           reduce using rule 41 (constant -> ( expression ) .)
    MUT             reduce using rule 41 (constant -> ( expression ) .)
    NUMBER          reduce using rule 41 (constant -> ( expression ) .)
    STRING          reduce using rule 41 (constant -> ( expression ) .)
    (               reduce using rule 41 (constant -> ( expression ) .)


state 62

    (28) do_block -> DO statements do_return expression . END
    (31) expression -> expression . + constant
    (32) expression -> expression . - constant
    (33) expression -> expression . * constant
    (34) expression -> expression . / constant
    (35) expression -> expression . ^ constant
    (36) expression -> expression . % constant

    END             shift and go to state 74
    +               shift and go to state 33
    -               shift and go to state 38
    *               shift and go to state 36
    /               shift and go to state 35
    ^               shift and go to state 37
    %               shift and go to state 34


state 63

    (29) do_block -> DO do_return expression END .

    END             reduce using rule 29 (do_block -> DO do_return expression END .)
    RETURN          reduce using rule 29 (do_block -> DO do_return expression END .)
                    reduce using rule 29 (do_block -> DO do_return expression END .)
    ID              reduce using rule 29 (do_block -> DO do_return expression END .)
    DEF             reduce using rule 29 (do_block -> DO do_return expression END .)
    DEFP            reduce using rule 29 (do_block -> DO do_return expression END .)
    DO              reduce using rule 29 (do_block -> DO do_return expression END .)
    CONST           reduce using rule 29 (do_block -> DO do_return expression END .)
    MUT             reduce using rule 29 (do_block -> DO do_return expression END .)
    NUMBER          reduce using rule 29 (do_block -> DO do_return expression END .)
    STRING          reduce using rule 29 (do_block -> DO do_return expression END .)
    (               reduce using rule 29 (do_block -> DO do_return expression END .)
    DEFMODULE       reduce using rule 29 (do_block -> DO do_return expression END .)
    $end            reduce using rule 29 (do_block -> DO do_return expression END .)


state 64

    (22) def_argument_list -> def_argument .

    )               reduce using rule 22 (def_argument_list -> def_argument .)
    ,               reduce using rule 22 (def_argument_list -> def_argument .)


state 65

    (19) def_argument -> assignment_qualifier . ID
    (15) assignment -> assignment_qualifier . ID = expression

    ID              shift and go to state 75


state 66

    (18) def_argument -> ID .
    (14) assignment -> ID . = expression

    )               reduce using rule 18 (def_argument -> ID .)
    ,               reduce using rule 18 (def_argument -> ID .)
    =               shift and go to state 32


state 67

    (20) def_argument -> assignment .

    )               reduce using rule 20 (def_argument -> assignment .)
    ,               reduce using rule 20 (def_argument -> assignment .)


state 68

    (16) function_definition -> DEF ID ( def_argument_list . ) do_block
    (23) def_argument_list -> def_argument_list . , def_argument

    )               shift and go to state 77
    ,               shift and go to state 76


state 69

    (21) def_argument_list -> empty .

    )               reduce using rule 21 (def_argument_list -> empty .)
    ,               reduce using rule 21 (def_argument_list -> empty .)


state 70

    (46) argument_list -> argument_list , . argument
    (43) argument -> . expression
    (30) expression -> . constant
    (31) expression -> . expression + constant
    (32) expression -> . expression - constant
    (33) expression -> . expression * constant
    (34) expression -> . expression / constant
    (35) expression -> . expression ^ constant
    (36) expression -> . expression % constant
    (37) constant -> . NUMBER
    (38) constant -> . STRING
    (39) constant -> . function_call
    (40) constant -> . ID
    (41) constant -> . ( expression )
    (42) function_call -> . ID ( argument_list )

    NUMBER          shift and go to state 28
    STRING          shift and go to state 12
    ID              shift and go to state 41
    (               shift and go to state 22

    expression                     shift and go to state 50
    constant                       shift and go to state 23
    argument                       shift and go to state 78
    function_call                  shift and go to state 17

state 71

    (42) function_call -> ID ( argument_list ) .

    +               reduce using rule 42 (function_call -> ID ( argument_list ) .)
    -               reduce using rule 42 (function_call -> ID ( argument_list ) .)
    *               reduce using rule 42 (function_call -> ID ( argument_list ) .)
    /               reduce using rule 42 (function_call -> ID ( argument_list ) .)
    ^               reduce using rule 42 (function_call -> ID ( argument_list ) .)
    %               reduce using rule 42 (function_call -> ID ( argument_list ) .)
    END             reduce using rule 42 (function_call -> ID ( argument_list ) .)
    RETURN          reduce using rule 42 (function_call -> ID ( argument_list ) .)
                    reduce using rule 42 (function_call -> ID ( argument_list ) .)
    ID              reduce using rule 42 (function_call -> ID ( argument_list ) .)
    DEF             reduce using rule 42 (function_call -> ID ( argument_list ) .)
    DEFP            reduce using rule 42 (function_call -> ID ( argument_list ) .)
    DO              reduce using rule 42 (function_call -> ID ( argument_list ) .)
    CONST           reduce using rule 42 (function_call -> ID ( argument_list ) .)
    MUT             reduce using rule 42 (function_call -> ID ( argument_list ) .)
    NUMBER          reduce using rule 42 (function_call -> ID ( argument_list ) .)
    STRING          reduce using rule 42 (function_call -> ID ( argument_list ) .)
    (               reduce using rule 42 (function_call -> ID ( argument_list ) .)
    )               reduce using rule 42 (function_call -> ID ( argument_list ) .)
    ,               reduce using rule 42 (function_call -> ID ( argument_list ) .)


state 72

    (17) private_function_definition -> DEFP ID ( def_argument_list . ) do_block
    (23) def_argument_list -> def_argument_list . , def_argument

    )               shift and go to state 79
    ,               shift and go to state 76


state 73

    (15) assignment -> assignment_qualifier ID = expression .
    (31) expression -> expression . + constant
    (32) expression -> expression . - constant
    (33) expression -> expression . * constant
    (34) expression -> expression . / constant
    (35) expression -> expression . ^ constant
    (36) expression -> expression . % constant

    )               reduce using rule 15 (assignment -> assignment_qualifier ID = expression .)
    ,               reduce using rule 15 (assignment -> assignment_qualifier ID = expression .)
    END             reduce using rule 15 (assignment -> assignment_qualifier ID = expression .)
    RETURN          reduce using rule 15 (assignment -> assignment_qualifier ID = expression .)
                    reduce using rule 15 (assignment -> assignment_qualifier ID = expression .)
    ID              reduce using rule 15 (assignment -> assignment_qualifier ID = expression .)
    DEF             reduce using rule 15 (assignment -> assignment_qualifier ID = expression .)
    DEFP            reduce using rule 15 (assignment -> assignment_qualifier ID = expression .)
    DO              reduce using rule 15 (assignment -> assignment_qualifier ID = expression .)
    CONST           reduce using rule 15 (assignment -> assignment_qualifier ID = expression .)
    MUT             reduce using rule 15 (assignment -> assignment_qualifier ID = expression .)
    NUMBER          reduce using rule 15 (assignment -> assignment_qualifier ID = expression .)
    STRING          reduce using rule 15 (assignment -> assignment_qualifier ID = expression .)
    (               reduce using rule 15 (assignment -> assignment_qualifier ID = expression .)
    +               shift and go to state 33
    -               shift and go to state 38
    *               shift and go to state 36
    /               shift and go to state 35
    ^               shift and go to state 37
    %               shift and go to state 34


state 74

    (28) do_block -> DO statements do_return expression END .

    END             reduce using rule 28 (do_block -> DO statements do_return expression END .)
    RETURN          reduce using rule 28 (do_block -> DO statements do_return expression END .)
                    reduce using rule 28 (do_block -> DO statements do_return expression END .)
    ID              reduce using rule 28 (do_block -> DO statements do_return expression END .)
    DEF             reduce using rule 28 (do_block -> DO statements do_return expression END .)
    DEFP            reduce using rule 28 (do_block -> DO statements do_return expression END .)
    DO              reduce using rule 28 (do_block -> DO statements do_return expression END .)
    CONST           reduce using rule 28 (do_block -> DO statements do_return expression END .)
    MUT             reduce using rule 28 (do_block -> DO statements do_return expression END .)
    NUMBER          reduce using rule 28 (do_block -> DO statements do_return expression END .)
    STRING          reduce using rule 28 (do_block -> DO statements do_return expression END .)
    (               reduce using rule 28 (do_block -> DO statements do_return expression END .)
    DEFMODULE       reduce using rule 28 (do_block -> DO statements do_return expression END .)
    $end            reduce using rule 28 (do_block -> DO statements do_return expression END .)


state 75

    (19) def_argument -> assignment_qualifier ID .
    (15) assignment -> assignment_qualifier ID . = expression

    )               reduce using rule 19 (def_argument -> assignment_qualifier ID .)
    ,               reduce using rule 19 (def_argument -> assignment_qualifier ID .)
    =               shift and go to state 60


state 76

    (23) def_argument_list -> def_argument_list , . def_argument
    (18) def_argument -> . ID
    (19) def_argument -> . assignment_qualifier ID
    (20) def_argument -> . assignment
    (12) assignment_qualifier -> . CONST
    (13) assignment_qualifier -> . MUT
    (14) assignment -> . ID = expression
    (15) assignment -> . assignment_qualifier ID = expression

    ID              shift and go to state 66
    CONST           shift and go to state 9
    MUT             shift and go to state 18

    assignment                     shift and go to state 67
    def_argument                   shift and go to state 80
    assignment_qualifier           shift and go to state 65

state 77

    (16) function_definition -> DEF ID ( def_argument_list ) . do_block
    (24) do_block -> . DO END
    (27) do_block -> . DO statements END
    (28) do_block -> . DO statements do_return expression END
    (29) do_block -> . DO do_return expression END

    DO              shift and go to state 6

    do_block                       shift and go to state 81

state 78

    (46) argument_list -> argument_list , argument .

    )               reduce using rule 46 (argument_list -> argument_list , argument .)
    ,               reduce using rule 46 (argument_list -> argument_list , argument .)


state 79

    (17) private_function_definition -> DEFP ID ( def_argument_list ) . do_block
    (24) do_block -> . DO END
    (27) do_block -> . DO statements END
    (28) do_block -> . DO statements do_return expression END
    (29) do_block -> . DO do_return expression END

    DO              shift and go to state 6

    do_block                       shift and go to state 82

state 80

    (23) def_argument_list -> def_argument_list , def_argument .

    )               reduce using rule 23 (def_argument_list -> def_argument_list , def_argument .)
    ,               reduce using rule 23 (def_argument_list -> def_argument_list , def_argument .)


state 81

    (16) function_definition -> DEF ID ( def_argument_list ) do_block .

    END             reduce using rule 16 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    RETURN          reduce using rule 16 (function_definition -> DEF ID ( def_argument_list ) do_block .)
                    reduce using rule 16 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    ID              reduce using rule 16 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    DEF             reduce using rule 16 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    DEFP            reduce using rule 16 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    DO              reduce using rule 16 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    CONST           reduce using rule 16 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    MUT             reduce using rule 16 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    NUMBER          reduce using rule 16 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    STRING          reduce using rule 16 (function_definition -> DEF ID ( def_argument_list ) do_block .)
    (               reduce using rule 16 (function_definition -> DEF ID ( def_argument_list ) do_block .)


state 82

    (17) private_function_definition -> DEFP ID ( def_argument_list ) do_block .

    END             reduce using rule 17 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    RETURN          reduce using rule 17 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
                    reduce using rule 17 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    ID              reduce using rule 17 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    DEF             reduce using rule 17 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    DEFP            reduce using rule 17 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    DO              reduce using rule 17 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    CONST           reduce using rule 17 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    MUT             reduce using rule 17 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    NUMBER          reduce using rule 17 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    STRING          reduce using rule 17 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)
    (               reduce using rule 17 (private_function_definition -> DEFP ID ( def_argument_list ) do_block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ( in state 14 resolved as shift
WARNING: shift/reduce conflict for ( in state 41 resolved as shift
